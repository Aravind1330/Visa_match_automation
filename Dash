import pandas as pd
import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_bootstrap_components as dbc
from dash.dependencies import Input, Output, State
import time

# Define the match_row function
def match_row(row1, row2):
    for i, rule in enumerate(rules):
        if rule(row1, row2):
            return True, i+1
    return False, None

# Define the app
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Define the layout
app.layout = dbc.Container([
    html.H1("Invoice Matching App"),
    html.Hr(),
    dbc.FormGroup([
        dbc.Label("T5 Table File Path"),
        dbc.Input(id="t5-path", type="text", placeholder="Enter file path"),
    ]),
    dbc.FormGroup([
        dbc.Label("Invoice Table File Path"),
        dbc.Input(id="invoice-path", type="text", placeholder="Enter file path"),
    ]),
    dbc.FormGroup([
        dbc.Label("Rules File Path"),
        dbc.Input(id="rules-path", type="text", placeholder="Enter file path"),
    ]),
    html.Br(),
    dbc.Button("Submit", id="submit-btn", color="primary", block=True),
    html.Br(),
    dbc.Progress(id="progress", value=0, max=100),
    dbc.Spinner(html.Div(id="output-div")),
])

# Define the callback functions
@app.callback(
    Output("output-div", "children"),
    Output("progress", "value"),
    Input("submit-btn", "n_clicks"),
    State("t5-path", "value"),
    State("invoice-path", "value"),
    State("rules-path", "value"),
)
def process_files(n_clicks, t5_path, invoice_path, rules_path):
    if n_clicks is None:
        return "", 0
    
    try:
        # Read the input files
        t5_table = pd.read_csv(t5_path)
        invoice_table = pd.read_csv(invoice_path)
        rules_df = pd.read_csv(rules_path)
        
        # Read the rules and rule descriptions
        global rules
        global rule_descriptions
        rules = []
        rule_descriptions = {}
        for i, row in rules_df.iterrows():
            rule_string = row['Rule']
            rule_description = row['Description']
            rule = eval(f"lambda row, row2: {rule_string}")
            rules.append(rule)
            rule_descriptions[i+1] = rule_description
        
        # Define the output columns
        output_columns = ['Company ID & Name', 'Match Rule', 'Description', 'fin_orig_supplier_nm', 'fin_source_amt', 'inv_match_source_amt', 'inv_erp_vend_no', 'inv_po_no']
        
        # Define a list to store the output rows
        output_rows = []
        
        # Loop through each row in table1 and find a match in table2
        total_rows = len(t5_table) * len(invoice_table)
        processed_rows = 0
        for T5 in t5_table.itertuples(index=False):
            for Invoice in invoice_table.itertuples(index=False):
                matched, rule_index = match_row(T5, Invoice)
                if matched:
                    description = rule_descriptions[rule_index]
                    output_rows.append({'Company ID & Name': T5.Company_ID_Name, 'Match Rule': rule_index, 'Description': description, 'fin_orig_supplier_nm': T5.fin_orig_supplier_nm, 'fin_source_amt':
            # Update the progress bar
            processed_rows += 1
            progress = int((processed_rows / total_rows) * 100)
            yield progress
    
    # Create the output table
    output_table = pd.DataFrame(output_rows, columns=output_columns)
    
    # Create the output HTML table
    output_html_table = dbc.Table.from_dataframe(output_table, striped=True, bordered=True, hover=True)
    
    # Return the output HTML table
    return html.Div([html.H3("Matched Invoices:"), output_html_table]), 100

except Exception as e:
    return html.Div([html.H3("Error:"), html.P(str(e))]), 0
    
    if name == "main":
app.run_server(debug=True)
