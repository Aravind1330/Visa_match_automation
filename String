# Convert the Invoice and Ticket number columns to strings, if necessary
table1['Supplier_name'] = table1['Supplier_name'].astype(str)
table2['Invoice no'] = table2['Invoice no'].astype(str)
table1['Ticket_no'] = table1['Ticket_no'].astype(str)
table2['Ticket_no'] = table2['Ticket_no'].astype(str)
table1['PNR'] = table1['PNR'].astype(str)
table2['PNR'] = table2['PNR'].astype(str)





aggregated = table1.groupby(['Company', 'Match Rule']).size().reset_index(name='TRF')
total = aggregated['TRF'].sum()
aggregated = aggregated.append(pd.Series(['Total', '-', total], index=aggregated.columns), ignore_index=True)
# Write the aggregated data to the second sheet of the Excel file
with pd.ExcelWriter('D:/Users/avasudevan/Desktop/Visa_match_automation/visa_auto/output1.xlsx', mode='a') as writer:
    aggregated.to_excel(writer, sheet_name='Aggregated', index=False)


table1['Match Rule'] = table1.apply(lambda row1: next((i+1 for i, rule in enumerate(rules) if eval(rule)), 'Unmatched'), axis=1)




merged_table = pd.merge(table1, table2, on=['Supplier_name', 'Ticket_no', 'PNR'], how='outer', suffixes=('_1', '_2'))
merged_table['Match Rule'] = merged_table.apply(lambda row: next((i+1 for i, rule in enumerate(rules) if eval(rule)), 'Unmatched') if not pd.isnull(row['Supplier_name']) else 'Unmatched', axis=1)










import pandas as pd

# Read the rules from a text file
with open("D:/Users/avasudevan/Desktop/APAC_Matching_automation/Rules.txt", 'r') as f:
    rules = f.readlines()

# Remove new line characters and empty lines
rules = [r.strip() for r in rules if r.strip()]

# Read in the first Excel sheet
table1 = pd.read_excel('D:/Users/avasudevan/Desktop/APAC_Matching_automation/Sample3.1.xlsx')

# Read in the second Excel sheet
table2 = pd.read_excel('D:/Users/avasudevan/Desktop/APAC_Matching_automation/Sample4.1.xlsx')

# Convert the Invoice and Ticket number columns to strings, if necessary
table1['Supplier_name'] = table1['Supplier_name'].astype(str)
table2['Invoice no'] = table2['Invoice no'].astype(str)
table1['Ticket_no'] = table1['Ticket_no'].astype(str)
table2['Ticket_no'] = table2['Ticket_no'].astype(str)
table1['PNR'] = table1['PNR'].astype(str)
table2['PNR'] = table2['PNR'].astype(str)

# Merge the two tables on the common columns
merged = pd.merge(table1, table2, how='outer', on=['Supplier_name', 'Invoice no', 'Source_Amount', 'Account_no', 'Transaction_Date', 'Transaction_Type'])

# Apply the matching rules to each row and create the "Match Rule" column
merged['Match Rule'] = merged.apply(lambda row: next((i+1 for i, rule in enumerate(rules) if eval(rule)), "Unmatched"), axis=1)

# Create a dictionary to map rule index to description
rule_description = {1: 'Invoice, Amount, Account no, Date and Transaction type should be same',
                   
                    'Unmatched':'No patterns found'}

# Create the "description" column based on the "Match Rule" column
merged['description'] = merged['Match Rule'].map(rule_description)

# Group the data by company and match rule and count the number of transactions
aggregated = merged.groupby(['Company', 'Match Rule']).size().reset_index(name='TRF')

# Calculate the total number of transactions
total = aggregated['TRF'].sum()

# Append a row with the total number of transactions
aggregated = aggregated.append(pd.Series(['Total', '-', total], index=aggregated.columns), ignore_index=True)

# Print the updated table and the aggregated data
print(merged)
print(aggregated)

# Write the data to an Excel file if necessary
# merged.to_excel("D:/Users/avasudevan/Desktop/Visa_match_automation/visa_auto/output1.xlsx", index=False)
# with pd.Excel



import pandas as pd
import numexpr as ne
from multiprocessing import Pool, cpu_count

# Read the rules from a text file
with open("D:/Users/avasudevan/Desktop/APAC_Matching_automation/Rules.txt", 'r') as f:
    rules = f.readlines()

# Remove new line characters and empty lines
rules = [r.strip() for r in rules if r.strip()]

# Define a function to apply the rules to each row pair and return the rule index
def match_row(args):
    i, row1, row2 = args
    expr = rules[i]
    result = ne.evaluate(expr)
    if result:
        return i+1
    else:
        return 0

# Read in the Excel sheets with specified data types
table1 = pd.read_excel('D:/Users/avasudevan/Desktop/APAC_Matching_automation/Sample3.1.xlsx',
                       dtype={'Supplier_name': str, 'Ticket_no': str, 'PNR': str})
table2 = pd.read_excel('D:/Users/avasudevan/Desktop/APAC_Matching_automation/Sample4.1.xlsx',
                       dtype={'Invoice no': str, 'Ticket_no': str, 'PNR': str})

# Create an empty column for the match rule index
table1['Match Rule'] = pd.Series([0]*len(table1))

# Split the input data into chunks for parallel processing
nchunks = cpu_count()
chunks = [(i, row1, table2) for i, row1 in table1.iterrows()]
chunks = [chunks[i::nchunks] for i in range(nchunks)]

# Process each chunk in parallel using multiprocessing
with Pool(processes=nchunks) as pool:
    results = pool.map(match_row, chunks)

# Combine the results and update the match rule index column
table1['Match Rule'] = pd.Series(results).replace(0, "Unmatched")

# Create a dictionary to map rule index to description
rule_description = {1: 'Invoice, Amount, Account no, Date and Transaction type should be same',                   
                    'Unmatched':'No patterns found'}

# Create the "description" column based on the "Match Rule" column
table1['description'] = table1['Match Rule'].map(rule_description)

# Print the updated table
print(table1)

# Aggregate the data by company and match rule
aggregated = table1.groupby(['Company', 'Match Rule']).size().reset_index(name='TRF')

# Add a row for total count
total = aggregated['TRF'].sum()
aggregated = aggregated.append(pd.Series(['Total', '-', total], index=aggregated.columns), ignore_index










# Read the rules from a text file
with open("D:/Users/avasudevan/Desktop/APAC_Matching_automation/Rules.txt", 'r') as f:
    rule_strings = f.readlines()

# Remove new line characters and empty lines, and convert to list of functions
rules = []
for rule_string in rule_strings:
    rule_string = rule_string.strip()
    if rule_string:
        rule = eval(f"lambda row1, row2: {rule_string}")
        rules.append(rule)

# Define a function to apply the rules to each row pair and return the rule index
def match_row(row1, row2):
    for i, rule in enumerate(rules):
        if rule(row1, row2):
            return True, i+1
    return False, "Unmatched"


