def match_transactions(T5_table, IV_table):
    output_rows = []
    unmatched_output_rows = []
    matched_invoices = []

    def one_to_one_match(T5, Invoice_table):
        for i, rule in enumerate(rules):
            if rule(T5, Invoice_table):
                return True, i + 1
        return False, "Unmatched"

    def bundle_match(T5, Invoice_table):
        matching_invoices = []
        total_invoice_source_amt = 0
        match_rule = None

        for i, Invoice in enumerate(Invoice_table):
            for rule_index, rule in enumerate(rules, start=1):
                if rule(T5, Invoice=Invoice):
                    matching_invoices.append((Invoice, rule_index))
                    total_invoice_source_amt += Invoice['inv_match_source_amt']
                    match_rule = rule_index

        if total_invoice_source_amt == T5['fin_source_amt']:
            return matching_invoices, match_rule
        return [], None

    for T5 in T5_table:
        match_found, match_rule = one_to_one_match(T5, IV_table)
        if match_found:
            matching_invoice, rule_index = match_found
            description = rule_descriptions.get(rule_index)
            output_row = {column: T5[column] if column in T5 else matching_invoice[column] for column in output_columns}
            output_row['Match Rule'] = rule_numbers.get(match_rule)
            output_row['description'] = description
            output_row['Match Type'] = "one-to-one"
            output_rows.append(output_row)
            matched_invoices.append(matching_invoice)

            # Remove the matched transaction from unmatched_output_df
            unmatched_indices = unmatched_output_df[
                (unmatched_output_df['fin_record_key'] == T5['fin_record_key']) &
                (unmatched_output_df['fin_source_amt'] == T5['fin_source_amt']) &
                (unmatched_output_df['fin_credit_debit_ind'] == T5['fin_credit_debit_ind'])
            ].index
            unmatched_output_df.drop(unmatched_indices, inplace=True)
        else:
            unmatched_output_row = {column: T5[column] if column in T5 else None for column in unmatched_output_columns}
            unmatched_output_rows.append(unmatched_output_row)

    for T5 in unmatched_output_rows:
        matching_invoices, match_rule = bundle_match(T5, IV_table)
        if matching_invoices:
            for invoice, rule_index in matching_invoices:
                description = rule_descriptions.get(rule_index)
                output_row = {column: T5[column] if column in T5 else invoice[column] for column in output_columns}
                output_row['Match Rule'] = rule_numbers.get(match_rule)
                output_row['description'] = description
                output_row['Match Type'] = "bundle match"
                output_rows.append(output_row)
                matched_invoices.append(invoice)

                # Remove the matched transaction from unmatched_output_df
                unmatched_indices = unmatched_output_df[
                    (unmatched_output_df['fin_record_key'] == T5['fin_record_key']) &
                    (unmatched_output_df['fin_source_amt'] == T5['fin_source_amt'])
                ].index
                unmatched_output_df.drop(unmatched_indices, inplace=True)
        else:
            unmatched_output_rows_bundle.append(T5)

    # Remove duplicates from unmatched_output_df
    unmatched_output_df.drop_duplicates(subset=['fin_record_key'], inplace=True)

    # Append the new unmatched transactions to the existing unmatched_output_df
    unmatched_output_df = unmatched_output_df.append(unmatched_output_rows, ignore_index=True)

    return output_rows, unmatched_output_df

# Call the match_transactions function
output_rows, unmatched_output_df = match_transactions(T5_table, IV_table)

# Create a DataFrame from the output rows
output_df = pd.DataFrame(output_rows, columns=output_columns)

# Write the unmatched transactions to a separate CSV file
unmatched_output_df.to_csv(unmatched_output_file, index=False)

# Write the output data to a CSV file
output_df.to_csv(config['output_files']['output_file'], index=False)

# Write the aggregated data to Excel
with pd.ExcelWriter(config['output_files']['output_file']) as writer:
    output_df.to_excel(writer, sheet_name='Output', index=False)

