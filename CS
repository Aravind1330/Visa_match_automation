    workbook  = writer.book
    worksheet = writer.sheets['Sheet1']

    # Define the format for the header cells (light blue color)
    header_format = workbook.add_format({'bg_color': '#add8e6'})

    # Apply the header format to the header row
    for col_num, value in enumerate(merged_df.columns.values):
        worksheet.write(0, col_num, value, header_format)


 # Get the xlsxwriter workbook and worksheet objects
    workbook  = writer.book
    worksheet = writer.sheets['Sheet1']

    # Define the format for the header cells (light blue color)
    header_format = workbook.add_format({'bg_color': '#add8e6'})

    # Apply the header format to the header rows
    for col_num, value in enumerate(merged_df.columns.values):
        worksheet.write(0, col_num, value, header_format)

    # Apply the header format to the second set of column names (from empty_w_rows)
    for col_num, value in enumerate(empty_w_rows.columns.values):
        worksheet.write(0, col_num + len(df.columns), value, header_format)




empty_w_rows['signed_source_amt'] = pd.to_numeric(empty_w_rows['signed_source_amt'], errors='coerce')
empty_w_rows['signed_source_amt'] = empty_w_rows.apply(lambda row: -row['signed_source_amt'] if row['trans_type_code'] == 11 else row['signed_source_amt'], axis=1)



mask = (empty_w_rows['trans_type_code'] == 11) & (empty_w_rows['signed_source_amt'] > 0)  # Only positive values
empty_w_rows.loc[mask, 'signed_source_amt'] *= -1









import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill

# Assuming your CSV file is named 'your_file.csv'
file_path = 'your_file.csv'

# Read the CSV file into a pandas DataFrame
df = pd.read_csv(file_path)

# Separate rows with empty values in column 'W'
empty_w_rows = df[df['W'].isnull()]

# Remove duplicates from empty_w_rows based on subset of columns 'a' and 'b'
empty_w_rows = empty_w_rows.drop_duplicates(subset=['a', 'b'])

# Convert 'signed_source_amt' to the appropriate numeric type, handling errors
empty_w_rows['signed_source_amt'] = pd.to_numeric(empty_w_rows['signed_source_amt'], errors='coerce')

# Conditionally update 'signed_source_amt' based on 'trans_type_code'
empty_w_rows.loc[empty_w_rows['trans_type_code'] == 11, 'signed_source_amt'] *= -1

# Copy values from 'signed_source_amt' to 'source_amt' in the empty_w_rows DataFrame
empty_w_rows.loc[:, 'source_amt'] = empty_w_rows['signed_source_amt']

# Remove rows with empty values in column 'W' from the original DataFrame
df = df.dropna(subset=['W'])

# Merge the two DataFrames (df and empty_w_rows) into a single DataFrame
merged_df = pd.concat([df, empty_w_rows], ignore_index=True)

# Initialize a workbook
wb = Workbook()

# Create a worksheet
ws = wb.active
ws.title = 'Sheet1'

# Set font size to 8 for the entire sheet
for row in ws.iter_rows():
    for cell in row:
        cell.font = Font(size=8)

# Add 4 blank rows at the end of 'signed_source_amt' column
total_rows_start = len(merged_df)
total_rows_end = total_rows_start + 4

# Apply light blue color to column names
for col_idx, col_name in enumerate(merged_df.columns):
    cell = ws.cell(row=1, column=col_idx+1)
    cell.value = col_name
    cell.fill = PatternFill(start_color="ADD8E6", end_color="ADD8E6", fill_type="solid")
    cell.font = Font(size=8)

# Calculate the sum of 'signed_source_amt' considering positive and negative values, excluding non-numeric values
total_sum_signed_source_amt = merged_df['signed_source_amt'].sum(skipna=True)

# Write 'Total' and its value
ws.cell(row=total_rows_end, column=1).value = 'Total'
ws.cell(row=total_rows_end, column=2).value = total_sum_signed_source_amt

# Load the second Excel sheet with 'tranamt' column
sheet2_df = pd.read_excel('second_sheet.xlsx')  # Provide the correct file name

# Calculate the sum of 'tranamt' column and round to two decimal places
sum_tranamt = round(sheet2_df['tranamt'].sum(skipna=True), 2)

# Write 'Sum Tranamt' and its value
ws.cell(row=total_rows_end + 1, column=1).value = 'Sum Tranamt'
ws.cell(row=total_rows_end + 1, column=2).value = sum_tranamt

# Calculate the difference between Total and Sum Tranamt
difference = total_sum_signed_source_amt - sum_tranamt

# Write 'Difference' and its value
ws.cell(row=total_rows_end + 2, column=1).value = 'Difference'
ws.cell(row=total_rows_end + 2, column=2).value = difference

# Save the workbook
wb.save('output_file.xlsx')













import os
import preprocess_file
import pandas as pd

def generate_excel_file(merged_df, second_sheet_path, output_path):
    with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
        # Write merged DataFrame to 'Sheet1'
        merged_df.to_excel(writer, sheet_name='Sheet1', index=False)

        # Add 4 blank rows at the end of 'signed_source_amt' column
        total_rows_start = len(merged_df)
        for i in range(4):
            writer.sheets['Sheet1'].write(total_rows_start + i, merged_df.columns.get_loc('signed_source_amt'), '', None)

        # Calculate the sum of 'signed_source_amt' considering positive and negative values, excluding non-numeric values
        total_sum_signed_source_amt = merged_df['signed_source_amt'].sum(skipna=True)
        writer.sheets['Sheet1'].write(total_rows_start + 4, merged_df.columns.get_loc('signed_source_amt'), 'Total', None)
        writer.sheets['Sheet1'].write(total_rows_start + 4, merged_df.columns.get_loc('signed_source_amt') + 1, total_sum_signed_source_amt)

        # Load the second Excel sheet with 'tranamt' column
        sheet2_df = pd.read_excel(second_sheet_path)

        # Calculate the sum of 'tranamt' column and round to two decimal places
        sum_tranamt = round(sheet2_df['tranamt'].sum(skipna=True), 2)

        # Add the sum of 'tranamt' below the total of 'signed_source_amt'
        writer.sheets['Sheet1'].write(total_rows_start + 5, merged_df.columns.get_loc('signed_source_amt'), 'Sum Tranamt', None)
        writer.sheets['Sheet1'].write(total_rows_start + 5, merged_df.columns.get_loc('signed_source_amt') + 1, sum_tranamt)

        # Calculate the difference between Total and Sum Tranamt
        difference = total_sum_signed_source_amt - sum_tranamt
        writer.sheets['Sheet1'].write(total_rows_start + 6, merged_df.columns.get_loc('signed_source_amt'), 'Difference', None)
        writer.sheets['Sheet1'].write(total_rows_start + 6, merged_df.columns.get_loc('signed_source_amt') + 1, difference)

def main():
    # Input and output file paths
    input_folder = 'input'
    output_folder = 'output'
    file_path = os.path.join(input_folder, 'your_file.csv')
    output_path = os.path.join(output_folder, 'output_file.xlsx')
    second_sheet_path = os.path.join(input_folder, 'second_sheet.xlsx')

    # Preprocess data
    merged_df = preprocess_file.preprocess_data(file_path)

    # Generate Excel file
    generate_excel_file(merged_df, second_sheet_path, output_path)

if __name__ == "__main__":
    main()















import os
import preprocess_file
import pandas as pd
import config

def generate_excel_file(merged_df, second_sheet_path, output_path):
    with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
        # Write merged DataFrame to 'Sheet1'
        merged_df.to_excel(writer, sheet_name='Sheet1', index=False)

        # Add 4 blank rows at the end of 'signed_source_amt' column
        total_rows_start = len(merged_df)
        for i in range(4):
            writer.sheets['Sheet1'].write(total_rows_start + i, merged_df.columns.get_loc('signed_source_amt'), '', None)

        # Calculate the sum of 'signed_source_amt' considering positive and negative values, excluding non-numeric values
        total_sum_signed_source_amt = merged_df['signed_source_amt'].sum(skipna=True)
        writer.sheets['Sheet1'].write(total_rows_start + 4, merged_df.columns.get_loc('signed_source_amt'), 'Total', None)
        writer.sheets['Sheet1'].write(total_rows_start + 4, merged_df.columns.get_loc('signed_source_amt') + 1, total_sum_signed_source_amt)

        # Load the second Excel sheet with 'tranamt' column
        sheet2_df = pd.read_excel(second_sheet_path)

        # Calculate the sum of 'tranamt' column and round to two decimal places
        sum_tranamt = round(sheet2_df['tranamt'].sum(skipna=True), 2)

        # Add the sum of 'tranamt' below the total of 'signed_source_amt'
        writer.sheets['Sheet1'].write(total_rows_start + 5, merged_df.columns.get_loc('signed_source_amt'), 'Sum Tranamt', None)
        writer.sheets['Sheet1'].write(total_rows_start + 5, merged_df.columns.get_loc('signed_source_amt') + 1, sum_tranamt)

        # Calculate the difference between Total and Sum Tranamt
        difference = total_sum_signed_source_amt - sum_tranamt
        writer.sheets['Sheet1'].write(total_rows_start + 6, merged_df.columns.get_loc('signed_source_amt'), 'Difference', None)
        writer.sheets['Sheet1'].write(total_rows_start + 6, merged_df.columns.get_loc('signed_source_amt') + 1, difference)

def main():
    # Input and output file paths
    input_folder = config.INPUT_FOLDER
    output_folder = config.OUTPUT_FOLDER
    input_file = config.INPUT_FILE
    output_file = config.OUTPUT_FILE
    second_sheet_file = config.SECOND_SHEET_FILE

    input_file_path = os.path.join(input_folder, input_file)
    output_file_path = os.path.join(output_folder, output_file)
    second_sheet_path = os.path.join(input_folder, second_sheet_file)

    # Preprocess data
    merged_df = preprocess_file.preprocess_data(input_file_path)

    # Generate Excel file
    generate_excel_file(merged_df, second_sheet_path, output_file_path)

if __name__ == "__main__":
    main()





import pandas as pd

def preprocess_data(file_path):
    # Read the CSV file into a pandas DataFrame
    df = pd.read_csv(file_path)

    # Separate rows with empty values in column 'W'
    empty_w_rows = df[df['W'].isnull()]

    # Remove duplicates from empty_w_rows based on subset of columns 'a' and 'b'
    empty_w_rows = empty_w_rows.drop_duplicates(subset=['a', 'b'])

    # Convert 'signed_source_amt' to the appropriate numeric type, handling errors
    empty_w_rows['signed_source_amt'] = pd.to_numeric(empty_w_rows['signed_source_amt'], errors='coerce')

    # Conditionally update 'signed_source_amt' based on 'trans_type_code'
    empty_w_rows.loc[empty_w_rows['trans_type_code'] == 11, 'signed_source_amt'] *= -1

    # Copy values from 'signed_source_amt' to 'source_amt' in the empty_w_rows DataFrame
    empty_w_rows.loc[:, 'source_amt'] = empty_w_rows['signed_source_amt']

    # Remove rows with empty values in column 'W' from the original DataFrame
    df = df.dropna(subset=['W'])

    # Merge the two DataFrames (df and empty_w_rows) into a single DataFrame
    merged_df = pd.concat([df, empty_w_rows], ignore_index=True)

    return merged_df



RIGHT([File Name], LEN([File Name]) - 8)
CONTAINS([File Name], [Extracted Substring])
{FIXED [File Keys] : MIN([Category])}
{ FIXED [File Name] : MAX([File ID]) }
REPLACE(REPLACE([Your Column], "_reprocess", ""), "_file", "")


IF [Category] = 'error' OR [Category] = 'fileerror' OR [Category] = 'parser' THEN 'Above' END
IF [Category] = 'completed' THEN 'Below' END



IF [Category] = 'error' OR [Category] = 'fileerror' OR [Category] = 'parser' THEN 'Above'
ELSEIF [Category] = 'completed' THEN 'Below'
END




import pandas as pd
from fbprophet import Prophet

# Load data
data = pd.read_csv("your_data.csv")

# Data Preprocessing
# Assuming data preprocessing involves handling missing values and dropping unnecessary columns
data.dropna(inplace=True)
data.drop(columns=['fin_record_key', 'fin_acct_num (masked)', 'fin_ticket_num', 'fin_purch_id',
                   'fin_auth_nbr', 'fin_region_id', 'fin_processor_id', 'fin_member_bank_id',
                   'mem_member_bank_name', 'fin_company_id', 'fin_trans_type',
                   'com_company_name', 'fin orig_trans _ref_num', 'fin_sector_type_cd',
                   'fin_source_curr_cd', 'fin_comm_file_id', 'fin_file_id', 'fin_merch__catg_cd',
                   'fin_purch_id_format', 'fin_trans_file_load_dt', 'fin_trans_ref_num',
                   'issuer_id and Name', 'company_id and name'], inplace=True)

# Feature Engineering
# Convert date columns to datetime format
data['fin_posting_dt'] = pd.to_datetime(data['fin_posting_dt'])
data['fin_trans_dt'] = pd.to_datetime(data['fin_trans_dt'])

# Date Features
data['posting_day'] = data['fin_posting_dt'].dt.day
data['posting_month'] = data['fin_posting_dt'].dt.month
data['posting_year'] = data['fin_posting_dt'].dt.year
data['trans_day'] = data['fin_trans_dt'].dt.day
data['trans_month'] = data['fin_trans_dt'].dt.month
data['trans_year'] = data['fin_trans_dt'].dt.year

# Transaction Frequency
data['trans_count'] = data.groupby('fin_acct_num')['fin_source_amt'].transform('count')

# Transaction Lag Features
data['prev_trans_amt'] = data.groupby('fin_acct_num')['fin_source_amt'].shift(1)

# Model Training
train_size = int(len(data) * 0.8)
train_data, test_data = data[:train_size], data[train_size:]

model = Prophet()
model.fit(train_data.rename(columns={"fin_posting_dt": "ds", "fin_source_amt": "y"}))

# Model Evaluation
future = model.make_future_dataframe(periods=len(test_data))
forecast = model.predict(future)

# Forecasting for the next 5 years
future_years = model.make_future_dataframe(periods=5*365)
forecast_future = model.predict(future_years)

# Plot forecast
fig = model.plot(forecast_future)

# Show plot
fig.show()













import pandas as pd

# Load data
data = pd.read_csv("your_data.csv")

# Display basic information about the dataset
print("Data shape:", data.shape)
print("\nColumns:", data.columns)
print("\nData types:\n", data.dtypes)
print("\nHead of the data:\n", data.head())


import matplotlib.pyplot as plt
import seaborn as sns

# Summary statistics of numerical variables
print("\nSummary statistics of numerical variables:\n", data.describe())

# Distribution of numerical variables
plt.figure(figsize=(10, 6))
sns.histplot(data['fin_source_amt'], bins=20, kde=True)
plt.title('Distribution of Transaction Amount')
plt.xlabel('Transaction Amount')
plt.ylabel('Frequency')
plt.show()

# Distribution of categorical variables
plt.figure(figsize=(10, 6))
sns.countplot(data['fin_debit_credit_ind'])
plt.title('Distribution of Debit/Credit Indication')
plt.xlabel('Debit/Credit Indication')
plt.ylabel('Count')
plt.show()

# Relationship between variables
plt.figure(figsize=(10, 6))
sns.scatterplot(x='fin_source_amt', y='fin_billing_amt', data=data)
plt.title('Relationship between Source Amount and Billing Amount')
plt.xlabel('Source Amount')
plt.ylabel('Billing Amount')
plt.show()

# Temporal patterns in transaction data
plt.figure(figsize=(14, 6))
sns.lineplot(x='fin_posting_dt', y='fin_source_amt', data=data)
plt.title('Transaction Amount Over Time')
plt.xlabel('Posting Date')
plt.ylabel('Transaction Amount')
plt.show()


# Distribution of Transaction Amount by Transaction Type
plt.figure(figsize=(10, 6))
sns.boxplot(x='fin_debit_credit_ind', y='fin_source_amt', data=data)
plt.title('Transaction Amount by Debit/Credit Indication')
plt.xlabel('Debit/Credit Indication')
plt.ylabel('Transaction Amount')
plt.show()

# Transaction Amount Over Time by Supplier
plt.figure(figsize=(14, 6))
sns.lineplot(x='fin_posting_dt', y='fin_source_amt', hue='fin_orig_supplier_nm', data=data)
plt.title('Transaction Amount Over Time by Supplier')
plt.xlabel('Posting Date')
plt.ylabel('Transaction Amount')
plt.legend(title='Supplier', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

# Monthly Total Transaction Amount
data['month_year'] = data['fin_posting_dt'].dt.to_period('M')
monthly_total = data.groupby('month_year')['fin_source_amt'].sum()
plt.figure(figsize=(12, 6))
monthly_total.plot(kind='line', marker='o')
plt.title('Monthly Total Transaction Amount')
plt.xlabel('Month')
plt.ylabel('Total Transaction Amount')
plt.show()

# Transaction Frequency by Account
plt.figure(figsize=(10, 6))
sns.histplot(data['trans_count'], bins=20, kde=True)
plt.title('Distribution of Transaction Frequency by Account')
plt.xlabel('Transaction Frequency')
plt.ylabel('Count')
plt.show()

# Correlation Heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

# Transaction Amount Distribution by Currency
plt.figure(figsize=(10, 6))
sns.boxplot(x='fin_billing_curr_cd', y='fin_source_amt', data=data)
plt.title('Transaction Amount by Currency')
plt.xlabel('Billing Currency')
plt.ylabel('Transaction Amount')
plt.show()

# Transaction Amount Outliers
plt.figure(figsize=(10, 6))
sns.boxplot(y='fin_source_amt', data=data)
plt.title('Transaction Amount Outliers')
plt.ylabel('Transaction Amount')
plt.show()

# Transaction Amount by Merchant Category
plt.figure(figsize=(12, 6))
sns.boxplot(x='fin_supplier_nm', y='fin_source_amt', data=data)
plt.title('Transaction Amount by Merchant Category')
plt.xlabel('Merchant Category')
plt.ylabel('Transaction Amount')
plt.xticks(rotation=90)
plt.show()





import pandas as pd

# Assuming your data is stored in a CSV file named 'transactions.csv'
# Load the data into a pandas DataFrame
df = pd.read_csv('transactions.csv')

# Parse the posting date to extract the month
df['fin_posting_dt'] = pd.to_datetime(df['fin_posting_dt'], format='%d/%m/%Y')
df['posting_month'] = df['fin_posting_dt'].dt.to_period('M')

# Filter transactions where the source amount is greater than 5000
df_filtered = df[df['fin_source_amt'] > 5000]

# Group by masked account number and posting month, and count transactions
result = df_filtered.groupby(['fin_acct_num (masked)', 'posting_month']).size().reset_index(name='transaction_count')

# Display the result
print(result)


result = df_filtered.groupby(['fin_acct_num (masked)', 'posting_month']).agg(transaction_count=('fin_source_amt', 'count'), volume_amount=('fin_source_amt', 'sum')).reset_index()



print("<font size='2'>")
print(result)
print("</font>")






import pandas as pd
from openpyxl.styles import Font, Color
from openpyxl.styles.colors import ColorChoice
from openpyxl.utils.dataframe import dataframe_to_rows

# Assuming your CSV file is named 'your_file.csv'
file_path = 'your_file.csv'

# Read the CSV file into a pandas DataFrame
df = pd.read_csv(file_path)

# Separate rows with empty values in column 'W'
empty_w_rows = df[df['W'].isnull()]

# Remove duplicates from empty_w_rows based on subset of columns 'a' and 'b'
empty_w_rows = empty_w_rows.drop_duplicates(subset=['a', 'b'])

# Convert 'signed_source_amt' to the appropriate numeric type, handling errors
empty_w_rows['signed_source_amt'] = pd.to_numeric(empty_w_rows['signed_source_amt'], errors='coerce')

# Conditionally update 'signed_source_amt' based on 'trans_type_code'
empty_w_rows.loc[empty_w_rows['trans_type_code'] == 11, 'signed_source_amt'] *= -1

# Copy values from 'signed_source_amt' to 'source_amt' in the empty_w_rows DataFrame
empty_w_rows.loc[:, 'source_amt'] = empty_w_rows['signed_source_amt']

# Remove rows with empty values in column 'W' from the original DataFrame
df = df.dropna(subset=['W'])

# Merge the two DataFrames (df and empty_w_rows) into a single DataFrame
merged_df = pd.concat([df, empty_w_rows], ignore_index=True)

# Save the merged DataFrame to an Excel file with a gap of 2 lines after sheet 1
with pd.ExcelWriter('output_file.xlsx', engine='openpyxl') as writer:
    # Write DataFrame to Excel file
    merged_df.iloc[:len(df)].to_excel(writer, sheet_name='Sheet1', index=False)
    merged_df.iloc[len(df):].to_excel(writer, sheet_name='Sheet1', startrow=len(df), index=False)

    # Accessing the workbook and worksheet
    wb = writer.book
    ws = writer.sheets['Sheet1']

    # Set font size to 8 for all cells
    for row in ws.iter_rows():
        for cell in row:
            cell.font = Font(size=8)

    # Set light blue color for column headings
    for cell in ws[1]:
        cell.font = Font(color="00CCFF", bold=True)

    # Add 4 blank rows at the end of 'signed_source_amt' column
    total_rows_start = len(merged_df)
    total_rows_end = total_rows_start + 4
    ws.cell(row=total_rows_start, column=merged_df.columns.get_loc('signed_source_amt')).value = ''
    ws.cell(row=total_rows_start + 1, column=merged_df.columns.get_loc('signed_source_amt')).value = ''
    ws.cell(row=total_rows_start + 2, column=merged_df.columns.get_loc('signed_source_amt')).value = ''
    ws.cell(row=total_rows_start + 3, column=merged_df.columns.get_loc('signed_source_amt')).value = ''

    # Calculate the sum of 'signed_source_amt' considering positive and negative values, excluding non-numeric values
    total_sum_signed_source_amt = merged_df['signed_source_amt'].sum(skipna=True)
    ws.cell(row=total_rows_end, column=merged_df.columns.get_loc('signed_source_amt')).value = 'Total'
    ws.cell(row=total_rows_end, column=merged_df.columns.get_loc('signed_source_amt') + 1).value = total_sum_signed_source_amt

    # Load the second Excel sheet with 'tranamt' column
    sheet2_df = pd.read_excel('second_sheet.xlsx')  # Provide the correct file name

    # Calculate the sum of 'tranamt' column and round to two decimal places
    sum_tranamt = round(sheet2_df['tranamt'].sum(skipna=True), 2)

    # Add the sum of 'tranamt' below the total of 'signed_source_amt'
    ws.cell(row=total_rows_end + 1, column=merged_df.columns.get_loc('signed_source_amt')).value = 'Sum Tranamt'
    ws.cell(row=total_rows_end + 1, column=merged_df.columns.get_loc('signed_source_amt') + 1).value = sum_tranamt

    # Calculate the difference between Total and Sum Tranamt
    difference = total_sum_signed_source_amt - sum_tranamt
    ws.cell(row=total_rows_end + 2, column=merged_df.columns.get_loc('signed_source_amt')).value = 'Difference'
    ws.cell(row=total_rows_end + 2, column=merged_df.columns.get_loc('signed_source_amt') + 1).value = difference

# Save the workbook
wb.save('output_file.xlsx')



    # Set light blue color for column headings
    for cell in ws[1]:
        cell.font = Font(color="FFFFFF", bold=True)
        cell.fill = PatternFill(start_color='00CCFF', end_color='00CCFF', fill_type='solid')





SELECT DISTINCT A.*, B.COMPANY_NM, B.ISSUER_NM
FROM CDSLTAP1.TCOSUB_CTA_ACCT A
LEFT OUTER JOIN CDSLTAP1.TCOLKP_COMPANY B 
    ON A.REGION_ID = B.REGION_ID
    AND A.PROCESSOR_ID = B.PROCESSOR_ID
    AND A.MEMBER_BANK_ID = B.MEMBER_BANK_ID
    AND A.COMPANY_ID = B.COMPANY_ID
WHERE A.REGION_ID = 6;



 # Get the workbook and worksheet objects
    workbook = writer.book
    worksheet = writer.sheets['Sheet1']

    # Set font size to 8 for the entire sheet
    cell_format = workbook.add_format({'font_size': 8})
    worksheet.set_column(0, len(merged_df.columns) - 1, None, cell_format)

   # Set font size to 8 for column names
    header_format = workbook.add_format({'font_size': 8, 'bold': True})
    for col_num, value in enumerate(merged_df.columns.values):
        worksheet.write(0, col_num, value, header_format)



    # Set font size to 8 for the entire sheet
    cell_format = workbook.add_format({'font_size': 8})
    worksheet.set_column(0, len(merged_df.columns) - 1, None, cell_format)

    # Set font size to 8 for column names after the gap
    for col_num, value in enumerate(merged_df.columns.values):
        worksheet.write(len(df) + 2, col_num, value, cell_format)



    # Set blue background color for column header row after the gap
    blue_format = workbook.add_format({'font_size': 8, 'bg_color': '#b8cce4'})
    for col_num, value in enumerate(merged_df.columns.values):
        worksheet.write(len(df) + 2, col_num, value, blue_format)



    # Add 4 blank rows after the initial data
    total_rows_end = len(merged_df) + 4
    for i in range(4):
        writer.sheets['Sheet1'].write(len(df) + i, 0, '', None)
   # Write the sum of 'signed_source_amt' directly to that column
    worksheet.write(total_rows_end, merged_df.columns.get_loc('signed_source_amt') + 1, total_sum_signed_source_amt, cell_format)






















import pandas as pd
import os

# Function to process files from two folders
def process_files(input_folder1, input_folder2, output_folder):
    # Create output folder if it doesn't exist
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    # Process files from folder 1
    for i in range(1, 11):
        file_name = f'file{i}.csv'
        input_file_path = os.path.join(input_folder1, file_name)
        output_file_path = os.path.join(output_folder, f'output_file_{i}.xlsx')
        process_file(input_file_path, output_file_path)

    # Process files from folder 2
    for i in range(1, 11):
        file_name = f'file{i}.xlsx'
        input_file_path = os.path.join(input_folder2, file_name)
        output_file_path = os.path.join(output_folder, f'output_file_{i + 10}.xlsx')
        process_file(input_file_path, output_file_path)

# Function to process each file
def process_file(input_file_path, output_file_path):
    # Read the CSV or Excel file into a pandas DataFrame
    if input_file_path.endswith('.csv'):
        df = pd.read_csv(input_file_path)
    elif input_file_path.endswith('.xlsx'):
        df = pd.read_excel(input_file_path)
    else:
        print(f'Unsupported file format for {input_file_path}')
        return

    # Separate rows with empty values in column 'W'
    empty_w_rows = df[df['W'].isnull()]

    # Remove duplicates from empty_w_rows based on subset of columns 'a' and 'b'
    empty_w_rows = empty_w_rows.drop_duplicates(subset=['a', 'b'])

    # Convert 'signed_source_amt' to the appropriate numeric type, handling errors
    empty_w_rows['signed_source_amt'] = pd.to_numeric(empty_w_rows['signed_source_amt'], errors='coerce')

    # Conditionally update 'signed_source_amt' based on 'trans_type_code'
    empty_w_rows.loc[empty_w_rows['trans_type_code'] == 11, 'signed_source_amt'] *= -1

    # Copy values from 'signed_source_amt' to 'source_amt' in the empty_w_rows DataFrame
    empty_w_rows['source_amt'] = empty_w_rows['signed_source_amt']

    # Remove rows with empty values in column 'W' from the original DataFrame
    df = df.dropna(subset=['W'])

    # Merge the two DataFrames (df and empty_w_rows) into a single DataFrame
    merged_df = pd.concat([df, empty_w_rows], ignore_index=True)

    # Save the merged DataFrame to an Excel file with a gap of 4 lines after sheet 1
    with pd.ExcelWriter(output_file_path, engine='xlsxwriter') as writer:
        merged_df.iloc[:len(df)].to_excel(writer, sheet_name='Sheet1', index=False)
        merged_df.iloc[len(df):].to_excel(writer, sheet_name='Sheet1', startrow=len(df) + 4, index=False)

        # Add 4 blank rows after the initial data
        total_rows_end = len(merged_df) + 4
        for i in range(4):
            writer.sheets['Sheet1'].write(len(df) + i, 0, '', None)

        # Calculate the sum of 'signed_source_amt' considering positive and negative values, excluding non-numeric values
        total_sum_signed_source_amt = merged_df['signed_source_amt'].sum(skipna=True)
        writer.sheets['Sheet1'].write(total_rows_end, merged_df.columns.get_loc('signed_source_amt'), 'Total', None)
        writer.sheets['Sheet1'].write(total_rows_end, merged_df.columns.get_loc('signed_source_amt') + 1, total_sum_signed_source_amt)

        # Load the second Excel sheet with 'tranamt' column
        sheet2_df = pd.read_excel('second_sheet.xlsx')  # Provide the correct file name

        # Calculate the sum of 'tranamt' column and round to two decimal places
        sum_tranamt = round(sheet2_df['tranamt'].sum(skipna=True), 2)

        # Add the sum of 'tranamt' below the total of 'signed_source_amt'
        writer.sheets['Sheet1'].write(total_rows_end + 1, merged_df.columns.get_loc('signed_source_amt'), 'Sum Tranamt', None)
        writer.sheets['Sheet1'].write(total_rows_end + 1, merged_df.columns.get_loc('signed_source_amt') + 1, sum_tranamt)

        # Calculate the difference between Total and Sum Tranamt
        difference = total_sum_signed_source_amt - sum_tranamt
        writer.sheets['Sheet1'].write(total_rows_end + 2, merged_df.columns.get_loc('signed_source_amt'), 'Difference', None)
        writer.sheets['Sheet1'].write(total_rows_end + 2, merged_df.columns.get_loc('signed_source_amt') + 1, difference)

        # Get the workbook and worksheet objects
        workbook = writer.book
        worksheet = writer.sheets['Sheet1']

        # Set font size to 8 for the entire sheet
        cell_format = workbook.add_format({'font_size': 8})
        worksheet.set_column(0, len(merged_df.columns) - 1, None, cell_format)

        # Set font size to 8 and fill color for column names after the gap
        header_format = workbook.add_format({'font_size': 8, 'bold': True, 'bg_color': '#b8cce4'})
        for col_num, value in enumerate(merged_df.columns.values):
            worksheet.write(len(df) + 4, col_num, value, header_format)

        # Write the sum of 'signed_source_amt' directly to that column
        worksheet.write(total_rows_end, merged_df.columns.get_loc('signed_source_amt') + 1, total_sum_signed_source_amt, cell_format)

# Define input and output folders
input_folder1 = 'input_folder1'
input_folder2 = 'input_folder2'
output_folder = 'output_files'

# Process files from the folders
process_files(input_folder1, input_folder2, output_folder)














import pandas as pd

# Function to preprocess DataFrame
def preprocess_data(df):
    # Separate rows with empty values in column 'W'
    empty_w_rows = df[df['W'].isnull()]

    # Remove duplicates from empty_w_rows based on subset of columns 'a' and 'b'
    empty_w_rows = empty_w_rows.drop_duplicates(subset=['a', 'b'])

    # Convert 'signed_source_amt' to the appropriate numeric type, handling errors
    empty_w_rows['signed_source_amt'] = pd.to_numeric(empty_w_rows['signed_source_amt'], errors='coerce')

    # Conditionally update 'signed_source_amt' based on 'trans_type_code'
    empty_w_rows.loc[empty_w_rows['trans_type_code'] == 11, 'signed_source_amt'] *= -1

    # Copy values from 'signed_source_amt' to 'source_amt' in the empty_w_rows DataFrame
    empty_w_rows['source_amt'] = empty_w_rows['signed_source_amt']

    # Remove rows with empty values in column 'W' from the original DataFrame
    df = df.dropna(subset=['W'])

    # Merge the two DataFrames (df and empty_w_rows) into a single DataFrame
    merged_df = pd.concat([df, empty_w_rows], ignore_index=True)
    
    return merged_df

# Function to process each file
def process_file(input_file_path, output_file_path):
    # Read the CSV or Excel file into a pandas DataFrame
    if input_file_path.endswith('.csv'):
        df = pd.read_csv(input_file_path)
    elif input_file_path.endswith('.xlsx'):
        df = pd.read_excel(input_file_path)
    else:
        print(f'Unsupported file format for {input_file_path}')
        return
    
    # Preprocess the DataFrame
    merged_df = preprocess_data(df)

    # Save the processed DataFrame to an Excel file
    with pd.ExcelWriter(output_file_path, engine='xlsxwriter') as writer:
        merged_df.to_excel(writer, sheet_name='Sheet1', index=False)

# You can define the other functions here, if necessary

# Define input and output folders
input_folder1 = 'input_folder1'
input_folder2 = 'input_folder2'
output_folder = 'output_files'

# Function to process files from two folders
def process_files(input_folder1, input_folder2, output_folder):
    # Iterate through files in folder 1
    for i in range(1, 11):
        file_name = f'file{i}.csv'
        input_file_path = os.path.join(input_folder1, file_name)
        output_file_path = os.path.join(output_folder, f'output_file_{i}.xlsx')
        process_file(input_file_path, output_file_path)

    # Iterate through files in folder 2
    for i in range(1, 11):
        file_name = f'file{i}.xlsx'
        input_file_path = os.path.join(input_folder2, file_name)
        output_file_path = os.path.join(output_folder, f'output_file_{i + 10}.xlsx')
        process_file(input_file_path, output_file_path)

# Process files from the folders
process_files(input_folder1, input_folder2, output_folder)



    # Save the processed DataFrame to an Excel file
    processed_df.to_excel(output_file_path, index=False)










    # Create a Pandas Excel writer using XlsxWriter as the engine
    with pd.ExcelWriter(output_file_path, engine='xlsxwriter') as writer:
        # Write the processed DataFrame to the Excel file
        processed_df.to_excel(writer, sheet_name='Sheet1', index=False)

        # Access the XlsxWriter workbook and worksheet objects
        workbook = writer.book
        worksheet = writer.sheets['Sheet1']

        # Add 4 blank rows after the initial data
        total_rows_end = len(processed_df) + 4
        for i in range(4):
            worksheet.write(len(processed_df) + i, 0, '', None)

        # Calculate the sum of 'signed_source_amt' considering positive and negative values, excluding non-numeric values
        total_sum_signed_source_amt = processed_df['signed_source_amt'].sum(skipna=True)
        worksheet.write(total_rows_end, processed_df.columns.get_loc('signed_source_amt'), 'Total', None)
        worksheet.write(total_rows_end, processed_df.columns.get_loc('signed_source_amt') + 1, total_sum_signed_source_amt)

        # Load the second Excel sheet with 'tranamt' column
        sheet2_df = pd.read_excel('second_sheet.xlsx')  # Provide the correct file name

        # Calculate the sum of 'tranamt' column and round to two decimal places
        sum_tranamt = round(sheet2_df['tranamt'].sum(skipna=True), 2)

        # Add the sum of 'tranamt' below the total of 'signed_source_amt'
        worksheet.write(total_rows_end + 1, processed_df.columns.get_loc('signed_source_amt'), 'Sum Tranamt', None)
        worksheet.write(total_rows_end + 1, processed_df.columns.get_loc('signed_source_amt') + 1, sum_tranamt)

        # Calculate the difference between Total and Sum Tranamt
        difference = total_sum_signed_source_amt - sum_tranamt
        worksheet.write(total_rows_end + 2, processed_df.columns.get_loc('signed_source_amt'), 'Difference', None)
        worksheet.write(total_rows_end + 2, processed_df.columns.get_loc('signed_source_amt') + 1, difference)

        # Set font size to 8 for the entire sheet
        cell_format = workbook.add_format({'font_size': 8})
        worksheet.set_column(0, len(processed_df.columns) - 1, None, cell_format)

        # Set font size to 8 and fill color for column names after the gap
        header_format = workbook.add_format({'font_size': 8, 'bold': True, 'bg_color': '#b8cce4'})
        for col_num, value in enumerate(processed_df.columns.values):
            worksheet.write(len(processed_df) + 4, col_num, value, header_format)

        # Write the sum of 'signed_source_amt' directly to that column
        worksheet.write(total_rows_end, processed_df.columns.get_loc('signed_source_amt') + 1, total_sum_signed_source_amt, cell_format)




# Set the format for the ticket number column to prevent it from appearing in exponential form
    ticket_number_format = workbook.add_format({'num_format': '0'})
    worksheet.set_column(merged_df.columns.get_loc('ticket_number'), merged_df.columns.get_loc('ticket_number'), None, ticket_number_format)



    # Add the label "Sum Tranamt" to the left of the 'signed_source_amt' column
    writer.sheets['Sheet1'].write(total_rows_end, signed_source_amt_column - 1, 'Sum Tranamt', None)

    # Add the sum of 'tranamt' below the total of 'signed_source_amt'
    writer.sheets['Sheet1'].write(total_rows_end + 1, signed_source_amt_column, sum_tranamt)


    # Set the password for the output file
    writer.book._xlsx_file.fileheader.filename = 'output_file.xlsx'
    writer.book._xlsx_file.write_encrypted_file("YourPassword")

















# config.py

# File paths
CSV_FILE_PATH = 'your_file.csv'
SECOND_SHEET_FILE_PATH = 'second_sheet.xlsx'
OUTPUT_FILE_PATH = 'output_file.xlsx'


# preprocess.py
import pandas as pd
from config import CSV_FILE_PATH

def preprocess_data():
    # Read the CSV file into a pandas DataFrame
    df = pd.read_csv(CSV_FILE_PATH)

    # Separate rows with empty values in column 'W'
    empty_w_rows = df[df['W'].isnull()]

    # Remove duplicates from empty_w_rows based on subset of columns 'a' and 'b'
    empty_w_rows = empty_w_rows.drop_duplicates(subset=['a', 'b'])

    # Convert 'signed_source_amt' to the appropriate numeric type, handling errors
    empty_w_rows['signed_source_amt'] = pd.to_numeric(empty_w_rows['signed_source_amt'], errors='coerce')

    # Conditionally update 'signed_source_amt' based on 'trans_type_code'
    empty_w_rows.loc[empty_w_rows['trans_type_code'] == 11, 'signed_source_amt'] *= -1

    # Copy values from 'signed_source_amt' to 'source_amt' in the empty_w_rows DataFrame
    empty_w_rows.loc[:, 'source_amt'] = empty_w_rows['signed_source_amt']

    # Remove rows with empty values in column 'W' from the original DataFrame
    df = df.dropna(subset=['W'])

    # Merge the two DataFrames (df and empty_w_rows) into a single DataFrame
    merged_df = pd.concat([df, empty_w_rows], ignore_index=True)

    return merged_df



# main.py
import pandas as pd
from preprocess import preprocess_data
from config import OUTPUT_FILE_PATH, SECOND_SHEET_FILE_PATH

def main():
    # Preprocess the data
    merged_df = preprocess_data()

    # Save the merged DataFrame to an Excel file with a gap of 4 lines after sheet 1
    with pd.ExcelWriter(OUTPUT_FILE_PATH, engine='xlsxwriter') as writer:
        merged_df.iloc[:len(df)].to_excel(writer, sheet_name='Sheet1', index=False)
        merged_df.iloc[len(df):].to_excel(writer, sheet_name='Sheet1', startrow=len(df) + 4, index=False)

        # Add 4 blank rows after the initial data
        total_rows_end = len(merged_df) + 4
        for i in range(4):
            writer.sheets['Sheet1'].write(len(df) + i, 0, '', None)

        # Calculate the sum of 'signed_source_amt' considering positive and negative values, excluding non-numeric values
        total_sum_signed_source_amt = merged_df['signed_source_amt'].sum(skipna=True)

        # Load the second Excel sheet with 'tranamt' column
        sheet2_df = pd.read_excel(SECOND_SHEET_FILE_PATH)

        # Calculate the sum of 'tranamt' column and round to two decimal places
        sum_tranamt = round(sheet2_df['tranamt'].sum(skipna=True), 2)

        # Write the sum of 'signed_source_amt' directly to the same column
        signed_source_amt_column = merged_df.columns.get_loc('signed_source_amt')
        writer.sheets['Sheet1'].write(total_rows_end, signed_source_amt_column, total_sum_signed_source_amt)

        # Add the label "Sum Tranamt" to the left of the 'signed_source_amt' column
        writer.sheets['Sheet1'].write(total_rows_end, signed_source_amt_column - 1, 'Sum Tranamt', None)

        # Add the sum of 'tranamt' below the total of 'signed_source_amt'
        writer.sheets['Sheet1'].write(total_rows_end + 1, signed_source_amt_column, sum_tranamt)

        # Calculate the difference between Total and Sum Tranamt
        difference = total_sum_signed_source_amt - sum_tranamt

        # Write the difference to the left side of the 'signed_source_amt' column
        writer.sheets['Sheet1'].write(total_rows_end + 2, signed_source_amt_column - 1, 'Difference', None)
        writer.sheets['Sheet1'].write(total_rows_end + 2, signed_source_amt_column, difference)

        # Set the password for the output file
        writer.book.use_zip64()
        writer.book.set_password('YourPassword')

if __name__ == "__main__":
    main()






file_paths:
  csv_file: "C:/spark_offline/Recon_APAC/MAR/Mar 24/Vids/Wipro_2910_IN_Jan21_18_20240303043342.Csv*"
  encrypted_excel: "C:/spark_offline/Recon_APAC/MAR/Mar 24/Citi Statement/AUTODESK ASIA PH CTA - Mar24 Cycle xISx"
  output_excel: "C:/spark_offline/Recon_APAC/Feb/Feb24 27-26 cycle/output_file.xlsx"
password: "Citia123"



import pandas as pd
import msoffcrypto
import preprocess
import xlsxwriter
import io
import yaml

def read_config(config_path):
    with open(config_path, 'r') as file:
        config = yaml.safe_load(file)
    return config

def decrypt_excel(encrypted_path, password):
    with open(encrypted_path, 'rb') as file:
        office_file = msoffcrypto.OfficeFile(file)
        office_file.load_key(password=password)
        decrypted_workbook = io.BytesIO()
        office_file.decrypt(decrypted_workbook)
    return decrypted_workbook

def main():
    config = read_config('config.yml')

    # Read CSV file
    vids = pd.read_csv(config['file_paths']['csv_file'])

    # Decrypt Excel file
    decrypted_workbook = decrypt_excel(config['file_paths']['encrypted_excel'], config['password'])
    df = pd.read_excel(decrypted_workbook)

    # Preprocess data
    matched_df, unmatched_df = preprocess.preprocess_data(vids, df)

    # Calculate sums
    vids_sum, empty_invoices_sum, total, Trans_amt, diff = preprocess.calculate_sums(matched_df, unmatched_df, df)

    # Save to Excel
    preprocess.save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, config['file_paths']['output_excel'])

if __name__ == "__main__":
    main()




import pandas as pd

def preprocess_data(vids, df):
    Preprocess = vids[vids['Merchant Category Code'] != 0]
    matched_df = Preprocess[Preprocess['Invoice Number'].notnull()]
    mask = (matched_df['Transaction Type Code'] == 11) & (matched_df['Source Amount_T14'] > 0)
    matched_df.loc[mask, 'Source Amount_T14'] *= -1
    matched_df = matched_df.drop_duplicates(subset=['Invoice Number', 'Transaction Reference Number', 'Ticket Number', 'Source Amount_T14', 'Authorization'])

    unmatched_df = Preprocess[Preprocess['Invoice Number'].isnull()]
    unmatched_df = unmatched_df.drop_duplicates(subset=['Company Identification', 'Company Name', 'Card number', 'Transaction Reference Number'])
    unmatched_df['Source Amount_T14'] = unmatched_df['Signed Source Amount']
    
    return matched_df, unmatched_df

def calculate_sums(matched_df, unmatched_df, df):
    vids_sum = round(matched_df['Source Amount_T14'].sum(), 2)
    empty_invoices_sum = round(unmatched_df['Source Amount_T14'].sum(), 2)
    total = vids_sum + empty_invoices_sum
    Trans_amt = round(df['Source Amount'].sum(), 2)
    diff = total - Trans_amt
    return vids_sum, empty_invoices_sum, total, Trans_amt, diff

def save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, output_path):
    with pd.ExcelWriter(output_path, engine='xlsxwriter') as writer:
        matched_df.to_excel(writer, sheet_name='Sheet1', index=False)
        unmatched_df.to_excel(writer, sheet_name='Sheet1', startrow=len(matched_df) + 2, index=False)

        # Add blank rows
        total_rows_start = len(matched_df) + 2
        total_rows_end = total_rows_start + 4
        worksheet = writer.sheets['Sheet1']
        for row in range(total_rows_start, total_rows_end):
            for col in range(len(matched_df.columns)):
                worksheet.write(row, col, None)

        # Calculate sums and write to Excel
        total_sum = matched_df['Source Amount_T14'].sum()
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14'), 'Total of Matching Recon', None)
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14') + 1, round(total_sum, 2))
        worksheet.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14'), 'Total of CitiBank Travel Transactions', None)
        worksheet.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14') + 1, Trans_amt)
        worksheet.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14'), 'Difference between both', None)
        worksheet.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14') + 1, diff)







def save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, output_path):
    with pd.ExcelWriter(output_path, engine='xlsxwriter') as writer:
        matched_df.to_excel(writer, sheet_name='Sheet1', index=False)
        unmatched_df.to_excel(writer, sheet_name='Sheet1', startrow=len(matched_df) + 2, index=False)

        total_rows_start = len(matched_df) + 2
        total_rows_end = total_rows_start + 4
        
        worksheet = writer.sheets['Sheet1']
        
        # Add 4 blank rows at the end of 'Source Amount_T14' column
        for i in range(4):
            worksheet.write(total_rows_start + i, matched_df.columns.get_loc('Source Amount_T14'), None)

        # Calculate the sum of 'Source Amount_T14'
        total_sum = matched_df['Source Amount_T14'].sum()

        # Write the rounded sum to the Excel file with 2 decimal places
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14'), 'Total of Matching Recon', None)
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14') + 1, round(total_sum, 2))
        worksheet.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14'), 'Total of CitiBank Travel Transactions', None)
        worksheet.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14') + 1, Trans_amt)
        Difference = total_sum - Trans_amt
        worksheet.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14'), 'Difference between both', None)
        worksheet.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14') + 1, Difference)

        # Get the workbook and worksheet objects
        workbook = writer.book
        worksheet = writer.sheets['Sheet1']

        # Set font size to 8 for the entire sheet
        cell_format = workbook.add_format({'font_size': 8})
        worksheet.set_column(0, len(matched_df.columns) - 1, None, cell_format)

        # Set blue background color for column header row after the gap
        header_format = workbook.add_format({'font_size': 8, 'bg_color': '#b8cce4'})
        for col_num, value in enumerate(matched_df.columns.values):
            worksheet.write(0, col_num, value, header_format)

        # Set blue background color for column header row after the gap
        blue_format = workbook.add_format({'font_size': 8, 'bg_color': '#b8cce4'})
        for col_num, value in enumerate(matched_df.columns.values):
            worksheet.write(len(df) + 2, col_num, value, blue_format)

        # Set the format for the ticket number column to prevent it from appearing in exponential form
        ticket_number_format = workbook.add_format({'num_format': '0', 'font_size': 8})
        worksheet.set_column(matched_df.columns.get_loc('Ticket Number'), matched_df.columns.get_loc('Ticket Number'), None, ticket_number_format)










def save_to_excel(merged_df, total_sum, Trans_amt, output_path):
    with pd.ExcelWriter(output_path, engine='xlsxwriter') as writer:
        # Write merged data to Sheet1 with a gap of 2 lines
        merged_df.iloc[:len(merged_df)].to_excel(writer, sheet_name='Sheet1', index=False)
        merged_df.iloc[len(merged_df):].to_excel(writer, sheet_name='Sheet1', startrow=len(merged_df) + 2, index=False)

        worksheet = writer.sheets['Sheet1']

        # Add 4 blank rows at the end of 'Source Amount_T14' column
        total_rows_start = len(merged_df) + 2
        total_rows_end = total_rows_start + 4
        for i in range(4):
            worksheet.write(total_rows_start + i, merged_df.columns.get_loc('Source Amount_T14'), None)

        # Write the total sum to the Excel file with 2 decimal places
        worksheet.write(total_rows_end, merged_df.columns.get_loc('Source Amount_T14'), 'Total of Matching Recon', None)
        worksheet.write(total_rows_end, merged_df.columns.get_loc('Source Amount_T14') + 1, round(total_sum, 2))
        worksheet.write(total_rows_start + 2, merged_df.columns.get_loc('Source Amount_T14'), 'Total of CitiBank Travel Transactions', None)
        worksheet.write(total_rows_start + 2, merged_df.columns.get_loc('Source Amount_T14') + 1, Trans_amt)
        difference = total_sum - Trans_amt
        worksheet.write(total_rows_start + 3, merged_df.columns.get_loc('Source Amount_T14'), 'Difference between both', None)
        worksheet.write(total_rows_start + 3, merged_df.columns.get_loc('Source Amount_T14') + 1, difference)

        # Get the workbook and worksheet objects
        workbook = writer.book
        worksheet = writer.sheets['Sheet1']

        # Set font size to 8 for the entire sheet
        cell_format = workbook.add_format({'font_size': 8})
        worksheet.set_column(0, len(merged_df.columns) - 1, None, cell_format)

        # Set blue background color for column header row after the gap
        header_format = workbook.add_format({'font_size': 8, 'bg_color': '#b8cce4'})
        for col_num, value in enumerate(merged_df.columns.values):
            worksheet.write(0, col_num, value, header_format)

        # Set blue background color for column header row after the gap
        blue_format = workbook.add_format({'font_size': 8, 'bg_color': '#b8cce4'})
        for col_num, value in enumerate(merged_df.columns.values):
            worksheet.write(len(merged_df) + 2, col_num, value, blue_format)

        # Set the format for the ticket number column to prevent it from appearing in exponential form
        ticket_number_format = workbook.add_format({'num_format': '0', 'font_size': 8})
        worksheet.set_column(merged_df.columns.get_loc('Ticket Number'), merged_df.columns.get_loc('Ticket Number'), None, ticket_number_format)



        # Add 4 blank rows between matched/unmatched data and the totals
        worksheet = writer.sheets['Sheet1']
        for row in range(len(matched_df) + 2, len(matched_df) + 6):
            for col in range(len(matched_df.columns)):
                worksheet.write(row, col, None)

        # Write totals and difference to the Excel file
        total_rows_start = len(matched_df) + 6
        worksheet.write(total_rows_start, 0, 'Total Sum:', None)
        worksheet.write(total_rows_start, 1, round(vids_sum, 2))
        worksheet.write(total_rows_start + 1, 0, 'Transaction Amount (Trans_amt):', None)
        worksheet.write(total_rows_start + 1, 1, round(Trans_amt, 2))
        worksheet.write(total_rows_start + 2, 0, 'Difference:', None)
        worksheet.write(total_rows_start + 2, 1, round(diff, 2))























import os
import pandas as pd
import msoffcrypto
import preprocess
import xlsxwriter
import io
import yaml

def read_config(config_path):
    with open(config_path, 'r') as file:
        config = yaml.safe_load(file)
    return config

def decrypt_excel(encrypted_path, password):
    with open(encrypted_path, 'rb') as file:
        office_file = msoffcrypto.OfficeFile(file)
        office_file.load_key(password=password)
        decrypted_workbook = io.BytesIO()
        office_file.decrypt(decrypted_workbook)
    return decrypted_workbook

def process_files(csv_file, excel_file, output_folder, password):
    # Read CSV file
    vids = pd.read_csv(csv_file)

    # Decrypt Excel file
    decrypted_workbook = decrypt_excel(excel_file, password)
    df = pd.read_excel(decrypted_workbook)

    # Preprocess data
    matched_df, unmatched_df = preprocess.preprocess_data(vids, df)

    # Calculate sums
    vids_sum, empty_invoices_sum, total, Trans_amt, diff = preprocess.calculate_sums(matched_df, unmatched_df, df)

    # Save to Excel
    output_filename = os.path.join(output_folder, os.path.basename(csv_file).split('.')[0][-2:] + "_output.xlsx")
    preprocess.save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, output_filename)

def main():
    config = read_config('config.yml')

    csv_files = [os.path.join(config['input_folders']['csv_folder'], file) for file in os.listdir(config['input_folders']['csv_folder']) if file.endswith('.csv')]
    excel_files = [os.path.join(config['input_folders']['excel_folder'], file) for file in os.listdir(config['input_folders']['excel_folder']) if file.endswith('.xlsx')]

    for csv_file in csv_files:
        csv_file_suffix = os.path.basename(csv_file).split('.')[0][-2:]
        matching_excel_files = [file for file in excel_files if os.path.basename(file).startswith(csv_file_suffix)]
        if matching_excel_files:
            excel_file = matching_excel_files[0]  # Assuming there's only one matching excel file for each csv file
            process_files(csv_file, excel_file, config['output_folder'], config['password'])

if __name__ == "__main__":
    main()


input_folders:
  csv_folder: "input_csv"
  excel_folder: "input_excel"
output_folder: "output"
password: "Citia123"




import pandas as pd

def preprocess_data(vids, df):
    Preprocess = vids[vids['Merchant Category Code'] != 0]
    matched_df = Preprocess[Preprocess['Invoice Number'].notnull()]
    mask = (matched_df['Transaction Type Code'] == 11) & (matched_df['Source Amount_T14'] > 0)
    matched_df.loc[mask, 'Source Amount_T14'] *= -1
    matched_df = matched_df.drop_duplicates(subset=['Invoice Number', 'Transaction Reference Number', 'Ticket Number', 'Source Amount_T14', 'Authorization'])

    unmatched_df = Preprocess[Preprocess['Invoice Number'].isnull()]
    unmatched_df = unmatched_df.drop_duplicates(subset=['Company Identification', 'Company Name', 'Card number', 'Transaction Reference Number'])
    unmatched_df['Source Amount_T14'] = unmatched_df['Signed Source Amount']
    
    return matched_df, unmatched_df

def calculate_sums(matched_df, unmatched_df, df):
    vids_sum = round(matched_df['Source Amount_T14'].sum(), 2)
    empty_invoices_sum = round(unmatched_df['Source Amount_T14'].sum(), 2)
    total = vids_sum + empty_invoices_sum
    Trans_amt = round(df['Source Amount'].sum(), 2)
    diff = total - Trans_amt
    return vids_sum, empty_invoices_sum, total, Trans_amt, diff

def save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, output_path):
    with pd.ExcelWriter(output_path, engine='xlsxwriter') as writer:
        matched_df.to_excel(writer, sheet_name='Sheet1', index=False)
        unmatched_df.to_excel(writer, sheet_name='Sheet1', startrow=len(matched_df) + 2, index=False)

        # Add blank rows
        total_rows_start = len(matched_df) + 2
        total_rows_end = total_rows_start + 4
        worksheet = writer.sheets['Sheet1']
        for row in range(total_rows_start, total_rows_end):
            for col in range(len(matched_df.columns)):
                worksheet.write(row, col, None)

        # Calculate sums and write to Excel
        total_sum = matched_df['Source Amount_T14'].sum()
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14'), 'Total of Matching Recon', None)
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14') + 1, round(total_sum, 2))
        worksheet.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14'), 'Total of CitiBank Travel Transactions', None)
        worksheet.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14') + 1, Trans_amt)
        worksheet.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14'), 'Difference between both', None)
        worksheet.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14') + 1, diff)




import os
import pandas as pd
import msoffcrypto
import preprocess
import xlsxwriter
import io
import yaml

def read_config(config_path):
    with open(config_path, 'r') as file:
        config = yaml.safe_load(file)
    return config

def decrypt_excel(encrypted_path, password):
    with open(encrypted_path, 'rb') as file:
        office_file = msoffcrypto.OfficeFile(file)
        office_file.load_key(password=password)
        decrypted_workbook = io.BytesIO()
        office_file.decrypt(decrypted_workbook)
    return decrypted_workbook

def main():
    config = read_config('config.yml')
    csv_folder = config['input_folders']['csv_folder']
    excel_folder = config['input_folders']['excel_folder']
    output_folder = config['output_folder']
    password = config['password']

    # Iterate through CSV files
    for csv_file in os.listdir(csv_folder):
        csv_name = os.path.splitext(csv_file)[0]
        csv_last_two_chars = csv_name[-2:]

        # Find matching Excel file
        for excel_file in os.listdir(excel_folder):
            excel_name = os.path.splitext(excel_file)[0]
            excel_last_two_chars = excel_name[-2:]

            if csv_last_two_chars == excel_last_two_chars:
                # Read CSV file
                vids = pd.read_csv(os.path.join(csv_folder, csv_file))

                # Decrypt Excel file
                decrypted_workbook = decrypt_excel(os.path.join(excel_folder, excel_file), password)
                df = pd.read_excel(decrypted_workbook)

                # Preprocess data
                matched_df, unmatched_df = preprocess.preprocess_data(vids, df)

                # Calculate sums
                vids_sum, empty_invoices_sum, total, Trans_amt, diff = preprocess.calculate_sums(matched_df, unmatched_df, df)

                # Save to Excel
                output_file_name = f"output_{csv_last_two_chars}.xlsx"
                output_path = os.path.join(output_folder, output_file_name)
                preprocess.save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, output_path)

if __name__ == "__main__":
    main()


import pandas as pd
import xlsxwriter

def preprocess_data(vids, df):
    Preprocess = vids[vids['Merchant Category Code'] != 0]
    matched_df = Preprocess[Preprocess['Invoice Number'].notnull()]
    mask = (matched_df['Transaction Type Code'] == 11) & (matched_df['Source Amount_T14'] > 0)
    matched_df.loc[mask, 'Source Amount_T14'] *= -1
    matched_df = matched_df.drop_duplicates(subset=['Invoice Number', 'Transaction Reference Number', 'Ticket Number', 'Source Amount_T14', 'Authorization'])

    unmatched_df = Preprocess[Preprocess['Invoice Number'].isnull()]
    unmatched_df = unmatched_df.drop_duplicates(subset=['Company Identification', 'Company Name', 'Card number', 'Transaction Reference Number'])
    unmatched_df['Source Amount_T14'] = unmatched_df['Signed Source Amount']
    
    return matched_df, unmatched_df

def calculate_sums(matched_df, unmatched_df, df):
    vids_sum = round(matched_df['Source Amount_T14'].sum(), 2)
    empty_invoices_sum = round(unmatched_df['Source Amount_T14'].sum(), 2)
    total = vids_sum + empty_invoices_sum
    Trans_amt = round(df['Source Amount'].sum(), 2)
    diff = total - Trans_amt
    return vids_sum, empty_invoices_sum, total, Trans_amt, diff

def save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, output_path):
    with pd.ExcelWriter(output_path, engine='xlsxwriter') as writer:
        matched_df.to_excel(writer, sheet_name='Sheet1', index=False)
        unmatched_df.to_excel(writer, sheet_name='Sheet1', startrow=len(matched_df) + 2, index=False)

        # Add blank rows
        total_rows_start = len(matched_df) + 2
        total_rows_end = total_rows_start + 4
        worksheet = writer.sheets['Sheet1']
        for row in range(total_rows_start, total_rows_end):
            for col in range(len(matched_df.columns)):
                worksheet.write(row, col, None)

        # Calculate sums and write to Excel
        total_sum = matched_df['Source Amount_T14'].sum()
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14'), 'Total of Matching Recon', None)
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14') + 1, round(total_sum, 2))
        worksheet.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14'), 'Total of CitiBank Travel Transactions', None)
        worksheet.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14') + 1, Trans_amt)
        worksheet.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14'), 'Difference between both', None)
        worksheet.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14') + 1, diff)













import pandas as pd
import msoffcrypto
import preprocess
import xlsxwriter
import io
import yaml

def read_config(config_path):
    with open(config_path, 'r') as file:
        config = yaml.safe_load(file)
    return config

def decrypt_excel(encrypted_path, password):
    with open(encrypted_path, 'rb') as file:
        office_file = msoffcrypto.OfficeFile(file)
        office_file.load_key(password=password)
        decrypted_workbook = io.BytesIO()
        office_file.decrypt(decrypted_workbook)
    return decrypted_workbook

def main():
    config = read_config('config.yml')

    # Read CSV file
    vids = pd.read_csv(config['file_paths']['csv_file'])

    # Decrypt Excel file
    decrypted_workbook = decrypt_excel(config['file_paths']['encrypted_excel'], config['password'])
    df = pd.read_excel(decrypted_workbook)

    # Preprocess data
    matched_df, unmatched_df = preprocess.preprocess_data(vids, df)

    # Calculate sums
    vids_sum, empty_invoices_sum, total, Trans_amt, diff = preprocess.calculate_sums(matched_df, unmatched_df, df)

    # Save to Excel
    preprocess.save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, config['file_paths']['output_excel'])

if __name__ == "__main__":
    main()


import pandas as pd

def preprocess_data(vids, df):
    Preprocess = vids[vids['Merchant Category Code'] != 0]
    matched_df = Preprocess[Preprocess['Invoice Number'].notnull()]
    mask = (matched_df['Transaction Type Code'] == 11) & (matched_df['Source Amount_T14'] > 0)
    matched_df.loc[mask, 'Source Amount_T14'] *= -1
    matched_df = matched_df.drop_duplicates(subset=['Invoice Number', 'Transaction Reference Number', 'Ticket Number', 'Source Amount_T14', 'Authorization'])

    unmatched_df = Preprocess[Preprocess['Invoice Number'].isnull()]
    unmatched_df = unmatched_df.drop_duplicates(subset=['Company Identification', 'Company Name', 'Card number', 'Transaction Reference Number'])
    unmatched_df['Source Amount_T14'] = unmatched_df['Signed Source Amount']
    
    return matched_df, unmatched_df

def calculate_sums(matched_df, unmatched_df, df):
    vids_sum = round(matched_df['Source Amount_T14'].sum(), 2)
    empty_invoices_sum = round(unmatched_df['Source Amount_T14'].sum(), 2)
    total = vids_sum + empty_invoices_sum
    Trans_amt = round(df['Source Amount'].sum(), 2)
    diff = total - Trans_amt
    return vids_sum, empty_invoices_sum, total, Trans_amt, diff

def save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, output_path):
    with pd.ExcelWriter(output_path, engine='xlsxwriter') as writer:
        matched_df.to_excel(writer, sheet_name='Sheet1', index=False)
        unmatched_df.to_excel(writer, sheet_name='Sheet1', startrow=len(matched_df) + 2, index=False)

        # Add blank rows
        total_rows_start = len(matched_df) + 2
        total_rows_end = total_rows_start + 4
        worksheet = writer.sheets['Sheet1']
        for row in range(total_rows_start, total_rows_end):
            for col in range(len(matched_df.columns)):
                worksheet.write(row, col, None)

        # Calculate sums and write to Excel
        total_sum = matched_df['Source Amount_T14'].sum()
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14'), 'Total of Matching Recon', None)
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14') + 1, round(total_sum, 2))
        worksheet.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14'), 'Total of CitiBank Travel Transactions', None)
        worksheet.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14') + 1, Trans_amt)
        worksheet.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14'), 'Difference between both', None)
        worksheet.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14') + 1, diff)



file_paths:
  csv_file: "C:/spark_offline/Recon_APAC/MAR/Mar 24/Vids/Wipro_2910_IN_Jan21_18_20240303043342.Csv*"
  encrypted_excel: "C:/spark_offline/Recon_APAC/MAR/Mar 24/Citi Statement/AUTODESK ASIA PH CTA - Mar24 Cycle xISx"
  output_excel: "C:/spark_offline/Recon_APAC/Feb/Feb24 27-26 cycle/output_file.xlsx"
password: "Citia123"









input_folders:
  csv_folder: "path/to/csv/files"
  excel_folder: "path/to/excel/files"
output_folder: "path/to/output"
password: "Citia123"


import os
import pandas as pd
import msoffcrypto
import preprocess
import xlsxwriter
import io
import yaml

def read_config(config_path):
    with open(config_path, 'r') as file:
        config = yaml.safe_load(file)
    return config

def decrypt_excel(encrypted_path, password):
    with open(encrypted_path, 'rb') as file:
        office_file = msoffcrypto.OfficeFile(file)
        office_file.load_key(password=password)
        decrypted_workbook = io.BytesIO()
        office_file.decrypt(decrypted_workbook)
    return decrypted_workbook

def main():
    config = read_config('config.yml')
    csv_files = os.listdir(config['input_folders']['csv_folder'])
    excel_files = os.listdir(config['input_folders']['excel_folder'])

    for csv_file in csv_files:
        for excel_file in excel_files:
            if csv_file[-2:] == excel_file[-2:]:
                csv_path = os.path.join(config['input_folders']['csv_folder'], csv_file)
                excel_path = os.path.join(config['input_folders']['excel_folder'], excel_file)
                output_path = os.path.join(config['output_folder'], f"output_{csv_file[-2:]}.xlsx")

                # Read CSV file
                vids = pd.read_csv(csv_path)

                # Decrypt Excel file
                decrypted_workbook = decrypt_excel(excel_path, config['password'])
                df = pd.read_excel(decrypted_workbook)

                # Preprocess data
                matched_df, unmatched_df = preprocess.preprocess_data(vids, df)

                # Calculate sums
                vids_sum, empty_invoices_sum, total, Trans_amt, diff = preprocess.calculate_sums(matched_df, unmatched_df, df)

                # Save to Excel
                preprocess.save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, output_path)

if __name__ == "__main__":
    main()



import pandas as pd

def preprocess_data(vids, df):
    Preprocess = vids[vids['Merchant Category Code'] != 0]
    matched_df = Preprocess[Preprocess['Invoice Number'].notnull()]
    mask = (matched_df['Transaction Type Code'] == 11) & (matched_df['Source Amount_T14'] > 0)
    matched_df.loc[mask, 'Source Amount_T14'] *= -1
    matched_df = matched_df.drop_duplicates(subset=['Invoice Number', 'Transaction Reference Number', 'Ticket Number', 'Source Amount_T14', 'Authorization'])

    unmatched_df = Preprocess[Preprocess['Invoice Number'].isnull()]
    unmatched_df = unmatched_df.drop_duplicates(subset=['Company Identification', 'Company Name', 'Card number', 'Transaction Reference Number'])
    unmatched_df['Source Amount_T14'] = unmatched_df['Signed Source Amount']
    
    return matched_df, unmatched_df

def calculate_sums(matched_df, unmatched_df, df):
    vids_sum = round(matched_df['Source Amount_T14'].sum(), 2)
    empty_invoices_sum = round(unmatched_df['Source Amount_T14'].sum(), 2)
    total = vids_sum + empty_invoices_sum
    Trans_amt = round(df['Source Amount'].sum(), 2)
    diff = total - Trans_amt
    return vids_sum, empty_invoices_sum, total, Trans_amt, diff

def save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, output_path):
    with pd.ExcelWriter(output_path, engine='xlsxwriter') as writer:
        matched_df.to_excel(writer, sheet_name='Sheet1', index=False)
        unmatched_df.to_excel(writer, sheet_name='Sheet1', startrow=len(matched_df) + 2, index=False)

        # Add blank rows
        total_rows_start = len(matched_df) + 2
        total_rows_end = total_rows_start + 4
        worksheet = writer.sheets['Sheet1']
        for row in range(total_rows_start, total_rows_end):
            for col in range(len(matched_df.columns)):
                worksheet.write(row, col, None)

        # Calculate sums and write to Excel
        total_sum = matched_df['Source Amount_T14'].sum()
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14'), 'Total of Matching Recon', None)
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14') + 1, round(total_sum, 2))
        worksheet.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14'), 'Total of CitiBank Travel Transactions', None)
        worksheet.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14') + 1, Trans_amt)
        worksheet.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14'), 'Difference between both', None)
        worksheet.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14') + 1, diff)







import os
import pandas as pd
import msoffcrypto
import preprocess
import xlsxwriter
import io
import yaml

def read_config(config_path):
    with open(config_path, 'r') as file:
        config = yaml.safe_load(file)
    return config

def decrypt_excel(encrypted_path, password):
    with open(encrypted_path, 'rb') as file:
        office_file = msoffcrypto.OfficeFile(file)
        office_file.load_key(password=password)
        decrypted_workbook = io.BytesIO()
        office_file.decrypt(decrypted_workbook)
    return decrypted_workbook

def process_files(csv_file, encrypted_excel, output_excel, password):
    # Read CSV file
    vids = pd.read_csv(csv_file)

    # Decrypt Excel file
    decrypted_workbook = decrypt_excel(encrypted_excel, password)
    df = pd.read_excel(decrypted_workbook)

    # Preprocess data
    matched_df, unmatched_df = preprocess.preprocess_data(vids, df)

    # Calculate sums
    vids_sum, empty_invoices_sum, total, Trans_amt, diff = preprocess.calculate_sums(matched_df, unmatched_df, df)

    # Save to Excel
    preprocess.save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, output_excel)

def main():
    config = read_config('config.yml')

    csv_files_folder = config['file_paths']['csv_files_folder']
    excel_files_folder = config['file_paths']['excel_files_folder']
    output_folder = config['file_paths']['output_folder']

    for file in os.listdir(csv_files_folder):
        if file.endswith(".csv"):
            csv_file = os.path.join(csv_files_folder, file)
            corresponding_excel = os.path.join(excel_files_folder, file.replace(".csv", ".xlsx"))
            output_excel = os.path.join(output_folder, file.replace(".csv", "_output.xlsx"))
            if os.path.exists(corresponding_excel):
                process_files(csv_file, corresponding_excel, output_excel, config['password'])

if __name__ == "__main__":
    main()



import pandas as pd
import xlsxwriter

def save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, output_path):
    # Create a cell format with font size 8
    cell_format = {'font_size': 8}

    with pd.ExcelWriter(output_path, engine='xlsxwriter') as writer:
        # Write matched_df and unmatched_df to Excel
        matched_df.to_excel(writer, sheet_name='Sheet1', index=False)
        unmatched_df.to_excel(writer, sheet_name='Sheet1', startrow=len(matched_df) + 2, index=False)

        # Add blank rows
        total_rows_start = len(matched_df) + 2
        total_rows_end = total_rows_start + 4
        worksheet = writer.sheets['Sheet1']
        for row in range(total_rows_start, total_rows_end):
            for col in range(len(matched_df.columns)):
                worksheet.write(row, col, None)

        # Calculate total sum and write to Excel
        total_sum = matched_df['Source Amount_T14'].sum()
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14'), 'Total of Matching Recon', None)
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14') + 1, round(total_sum, 2))
        
        # Write total of CitiBank Travel Transactions and difference between both
        worksheet.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14'), 'Total of CitiBank Travel Transactions', None)
        worksheet.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14') + 1, Trans_amt)
        worksheet.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14'), 'Difference between both', None)
        worksheet.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14') + 1, diff)

        # Set font size to 8 for the entire sheet
        for row_num in range(total_rows_end + 1):
            worksheet.set_row(row_num, None, cell_format)

        # Set column names of matched and unmatched data in blue
        header_format = writer.book.add_format({'font_size': 8, 'bg_color': '#b8cce4', 'bold': True})
        for col_num, value in enumerate(matched_df.columns):
            worksheet.write(0, col_num, value, header_format)
            worksheet.write(len(matched_df) + 2, col_num, value, header_format)


def save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, output_path):
    # Create a workbook and add a worksheet
    workbook = xlsxwriter.Workbook(output_path)
    worksheet_matched = workbook.add_worksheet('matched_df')
    worksheet_unmatched = workbook.add_worksheet('unmatched_df')

    # Define cell format with font size 8 and blue font color for column headers
    header_format = workbook.add_format({'font_size': 8, 'bold': True, 'font_color': 'white', 'bg_color': 'blue'})
    # Define cell format with font size 8 for data cells
    data_format = workbook.add_format({'font_size': 8})

    # Write matched_df and unmatched_df to Excel
    matched_df.to_excel(workbook, sheet_name='matched_df', index=False, startrow=1, header=False)
    unmatched_df.to_excel(workbook, sheet_name='unmatched_df', index=False, startrow=1, header=False)

    # Write column headers with specified format
    for col_num, value in enumerate(matched_df.columns.values):
        worksheet_matched.write(0, col_num, value, header_format)
        worksheet_unmatched.write(0, col_num, value, header_format)

    # Add blank rows
    total_rows_start = len(matched_df) + 2
    total_rows_end = total_rows_start + 4
    for row in range(total_rows_start, total_rows_end):
        for col in range(len(matched_df.columns)):
            worksheet_matched.write(row, col, None, data_format)
            worksheet_unmatched.write(row - total_rows_start, col, None, data_format)

    # Calculate total sum and write to Excel for matched_df
    total_sum = matched_df['Source Amount_T14'].sum()
    worksheet_matched.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14'), 'Total of Matching Recon', header_format)
    worksheet_matched.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14') + 1, round(total_sum, 2), data_format)
    
    # Write total of CitiBank Travel Transactions and difference between both for matched_df
    worksheet_matched.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14'), 'Total of CitiBank Travel Transactions', header_format)
    worksheet_matched.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14') + 1, Trans_amt, data_format)
    worksheet_matched.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14'), 'Difference between both', header_format)
    worksheet_matched.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14') + 1, diff, data_format)

    workbook.close()







def save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, output_path):
    # Create a Pandas Excel writer using xlsxwriter as the engine
    with pd.ExcelWriter(output_path, engine='xlsxwriter') as writer:
        # Write matched_df and unmatched_df to Excel
        matched_df.to_excel(writer, sheet_name='Sheet1', index=False)
        unmatched_df.to_excel(writer, sheet_name='Sheet1', startrow=len(matched_df) + 2, index=False)

        # Get the xlsxwriter workbook and worksheet objects
        workbook = writer.book
        worksheet = writer.sheets['Sheet1']

        # Create a cell format with font size 8
        cell_format = workbook.add_format({'font_size': 8})

        # Set font size to 8 for the entire sheet
        for col_num, value in enumerate(matched_df.columns.values):
            worksheet.write(0, col_num, value, cell_format)

        for idx in range(len(matched_df) + 1):
            for col_num in range(len(matched_df.columns)):
                worksheet.write(idx + 1, col_num, matched_df.iloc[idx, col_num], cell_format)

        for idx in range(len(unmatched_df) + 1):
            for col_num in range(len(unmatched_df.columns)):
                worksheet.write(idx + len(matched_df) + 3, col_num, unmatched_df.iloc[idx, col_num], cell_format)

        # Add blank rows
        total_rows_start = len(matched_df) + 2
        total_rows_end = total_rows_start + 4
        for row in range(total_rows_start, total_rows_end):
            for col in range(len(matched_df.columns)):
                worksheet.write(row, col, None, cell_format)

        # Calculate total sum and write to Excel
        total_sum = matched_df['Source Amount_T14'].sum()
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14'), 'Total of Matching Recon', cell_format)
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14') + 1, round(total_sum, 2), cell_format)
        
        # Write total of CitiBank Travel Transactions and difference between both
        worksheet.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14'), 'Total of CitiBank Travel Transactions', cell_format)
        worksheet.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14') + 1, Trans_amt, cell_format)
        worksheet.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14'), 'Difference between both', cell_format)
        worksheet.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14') + 1, diff, cell_format)







def save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, output_path):
    with pd.ExcelWriter(output_path, engine='xlsxwriter') as writer:
        # Set font size to 8 for the entire sheet
        workbook = writer.book
        cell_format = workbook.add_format({'font_size': 8})
        worksheet = writer.sheets['Sheet1']
        worksheet.set_column(0, len(matched_df.columns) - 1, None, cell_format)

        # Write dataframes to Excel
        matched_df.to_excel(writer, sheet_name='Sheet1', index=False)
        unmatched_df.to_excel(writer, sheet_name='Sheet1', startrow=len(matched_df) + 2, index=False)

        # Add blank rows
        total_rows_start = len(matched_df) + 2
        total_rows_end = total_rows_start + 4
        for row in range(total_rows_start, total_rows_end):
            for col in range(len(matched_df.columns)):
                worksheet.write(row, col, None, cell_format)

        # Calculate sums and write to Excel
        total_sum = matched_df['Source Amount_T14'].sum()
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14'), 'Total of Matching Recon', cell_format)
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14') + 1, round(total_sum, 2), cell_format)
        worksheet.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14'), 'Total of CitiBank Travel Transactions', cell_format)
        worksheet.write(total_rows_start + 2, matched_df.columns.get_loc('Source Amount_T14') + 1, Trans_amt, cell_format)
        Difference = total_sum - Trans_amt
        worksheet.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14'), 'Difference between both', cell_format)
        worksheet.write(total_rows_start + 3, matched_df.columns.get_loc('Source Amount_T14') + 1, Difference, cell_format)






SELECT *
FROM cdsitap1.TCOODS_CARDTRANS
WHERE region_id = '3'
  AND PROCESSOR_ID = 12
  AND MEMBER_BANK_ID IN (10021528, another_member_bank_id, ...)
  AND COMPANY_ID IN (9000033803, another_company_id, ...)
  AND TRANSACTION_DATE BETWEEN '2024-01-26' AND '2024-03-10';










# Write labels and values under 'Source Amount_T14' column
        labels = ['Total of Matching Recon', 'Total of CitiBank Travel Transactions', 'Difference between both']
        values = [vids_sum, Trans_amt, diff]
        for i, (label, value) in enumerate(zip(labels, values), start=total_rows_start):
            worksheet.write(i, matched_df.columns.get_loc('Source Amount_T14'), label, cell_format)
            worksheet.write(i, matched_df.columns.get_loc('Source Amount_T14') + 1, round(value, 2), cell_format)

        # Calculate and write the sum of the values
        total_sum = sum(values)
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14'), 'Total Sum', cell_format)
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14') + 1, round(total_sum, 2), cell_format)






        workbook = writer.book
        cell_format = workbook.add_format({'font_size': 8})
        worksheet = writer.sheets['Sheet1']
        worksheet.set_column(0, len(matched_df.columns) - 1, None, cell_format)



        # Remove all borders
        for row in range(total_rows_end + 1):
            for col in range(len(matched_df.columns)):
                worksheet.write_blank(row, col, None, cell_format)



def save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, output_path):
    with pd.ExcelWriter(output_path, engine='xlsxwriter') as writer:
        # Set font size to 8 for the entire sheet
        workbook = writer.book
        cell_format = workbook.add_format({'font_size': 8})
        worksheet = writer.sheets['Sheet1']
        worksheet.set_column(0, len(matched_df.columns) - 1, None, cell_format)

        # Write dataframes to Excel
        matched_df.to_excel(writer, sheet_name='Sheet1', index=False)
        unmatched_df.to_excel(writer, sheet_name='Sheet1', startrow=len(matched_df) + 2, index=False)

        # Add blank rows
        total_rows_start = len(matched_df) + 2
        total_rows_end = total_rows_start + 4
        for row in range(total_rows_start, total_rows_end):
            for col in range(len(matched_df.columns)):
                worksheet.write(row, col, None, cell_format)

        # Calculate and write the sum of the values
        total_sum = sum(matched_df['Source Amount_T14'])
        vids_difference = total_sum - vids_sum

        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14') - 1, 'Total', cell_format)
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14'), round(total_sum, 2), cell_format)
        worksheet.write(total_rows_end + 1, matched_df.columns.get_loc('Source Amount_T14') - 1, 'Vids', cell_format)
        worksheet.write(total_rows_end + 1, matched_df.columns.get_loc('Source Amount_T14'), vids_sum, cell_format)
        worksheet.write(total_rows_end + 2, matched_df.columns.get_loc('Source Amount_T14') - 1, 'Difference', cell_format)
        worksheet.write(total_rows_end + 2, matched_df.columns.get_loc('Source Amount_T14'), diff, cell_format)












def save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, output_path):
    with pd.ExcelWriter(output_path, engine='xlsxwriter') as writer:
        # Create a new Excel sheet
        workbook = writer.book
        worksheet = workbook.add_worksheet('Sheet1')

        # Set font size to 8 for the entire sheet
        cell_format = workbook.add_format({'font_size': 8})
        worksheet.set_column(0, len(matched_df.columns) - 1, None, cell_format)

        # Write dataframes to Excel
        matched_df.to_excel(writer, sheet_name='Sheet1', index=False)
        unmatched_df.to_excel(writer, sheet_name='Sheet1', startrow=len(matched_df) + 2, index=False)

        # Add blank rows
        total_rows_start = len(matched_df) + 2
        total_rows_end = total_rows_start + 4
        for row in range(total_rows_start, total_rows_end):
            for col in range(len(matched_df.columns)):
                worksheet.write(row, col, None, cell_format)

        # Calculate and write the sum of the values
        total_sum = sum(matched_df['Source Amount_T14'])
        vids_difference = total_sum - vids_sum

        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14') - 1, 'Total', cell_format)
        worksheet.write(total_rows_end, matched_df.columns.get_loc('Source Amount_T14'), round(total_sum, 2), cell_format)
        worksheet.write(total_rows_end + 1, matched_df.columns.get_loc('Source Amount_T14') - 1, 'Vids', cell_format)
        worksheet.write(total_rows_end + 1, matched_df.columns.get_loc('Source Amount_T14'), vids_sum, cell_format)
        worksheet.write(total_rows_end + 2, matched_df.columns.get_loc('Source Amount_T14') - 1, 'Difference', cell_format)
        worksheet.write(total_rows_end + 2, matched_df.columns.get_loc('Source Amount_T14'), diff, cell_format)






# Write unmatched DataFrame and calculate its end row position
        unmatched_start_row = len(matched_df) + 2
        unmatched_df.to_excel(writer, sheet_name='Sheet1', startrow=unmatched_start_row, index=False)
        unmatched_end_row = unmatched_start_row + len(unmatched_df) + 1  # Add 1 for the blank row
        


        # Write unmatched DataFrame and calculate its end row position
        unmatched_start_row = len(matched_df) + 2
        unmatched_df.to_excel(writer, sheet_name='Sheet1', startrow=unmatched_start_row, index=False)
        unmatched_end_row = unmatched_start_row + len(unmatched_df) + 1  # Add 1 for the blank row

        # Calculate and write the sum of the values
        total_sum = sum(matched_df['Source Amount_T14'])
        vids_difference = total_sum - vids_sum

        # Write sums below unmatched DataFrame
        total_row = unmatched_end_row + 3
        worksheet.write(total_row, matched_df.columns.get_loc('Source Amount_T14') - 1, 'Total', cell_format)
        worksheet.write(total_row, matched_df.columns.get_loc('Source Amount_T14'), round(total_sum, 2), cell_format)
        
        vids_row = total_row + 1
        worksheet.write(vids_row, matched_df.columns.get_loc('Source Amount_T14') - 1, 'Vids', cell_format)
        worksheet.write(vids_row, matched_df.columns.get_loc('Source Amount_T14'), vids_sum, cell_format)
        
        diff_row = vids_row + 1
        worksheet.write(diff_row, matched_df.columns.get_loc('Source Amount_T14') - 1, 'Difference', cell_format)
        worksheet.write(diff_row, matched_df.columns.get_loc('Source Amount_T14'), diff, cell_format)




        cell_format = workbook.add_format({'font_size': 8, 'border': 0})
        worksheet.set_column(0, len(matched_df.columns) - 1, 8, cell_format)




        header_format = workbook.add_format({'font_size': 8, 'border': 0})
        for col_num, value in enumerate(matched_df.columns.values):
            worksheet.write(0, col_num, value, header_format)

        # Set font size to 8 and remove all borders for cell values
        cell_format = workbook.add_format({'font_size': 8, 'border': 0})
        for row_num in range(1, len(matched_df) + len(unmatched_df) + 1):
            for col_num in range(len(matched_df.columns)):
                worksheet.write(row_num, col_num, matched_df.iloc[row_num - 1, col_num], cell_format)









        # Set font size to 8 and remove bold and borders for column headers
        header_format = workbook.add_format({'font_size': 8, 'bold': False, 'border': 0})

        # Apply formatting to matched DataFrame column headers
        for col_num, value in enumerate(matched_df.columns.values):
            worksheet.write(0, col_num, value, header_format)

        # Apply formatting to unmatched DataFrame column headers
        for col_num, value in enumerate(unmatched_df.columns.values):
            worksheet.write(unmatched_start_row, col_num, value, header_format)

















import pandas as pd

def preprocess_data(vids, df):
    # Preprocessing logic
    return matched_df, unmatched_df

def calculate_sums(matched_df, unmatched_df, df):
    # Calculation logic
    return vids_sum, empty_invoices_sum, total, Trans_amt, diff

def save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, output_path):
    with pd.ExcelWriter(output_path, engine='xlsxwriter') as writer:
        # Get the workbook object
        workbook = writer.book

        # Write matched transactions label
        worksheet = writer.sheets['Sheet1']
        worksheet.write('A1', 'Matched Transactions')

        # Write matched DataFrame starting from the second row
        matched_df.to_excel(writer, sheet_name='Sheet1', index=False, startrow=1, header=True)

        # Write unmatched transactions label
        unmatched_start_row = len(matched_df) + 4
        worksheet.write(unmatched_start_row, 0, 'Unmatched Transactions')

        # Write unmatched DataFrame starting from the row after the label
        unmatched_df.to_excel(writer, sheet_name='Sheet1', index=False, startrow=unmatched_start_row + 1, header=True)

        # Get the worksheet object again as it might have changed after writing unmatched_df
        worksheet = writer.sheets['Sheet1']

        # Get the formats
        header_format = workbook.add_format({'font_size': 8, 'bold': False, 'border': 0})
        cell_format = workbook.add_format({'font_size': 8})

        # Apply formatting to column headers for matched DataFrame
        for col_num, value in enumerate(matched_df.columns.values):
            worksheet.write(1, col_num, value, header_format)

        # Apply formatting to column headers for unmatched DataFrame
        for col_num, value in enumerate(unmatched_df.columns.values):
            worksheet.write(unmatched_start_row + 1, col_num, value, header_format)

        # Calculate and write the sum of the values
        total_sum = sum(matched_df['Source Amount_T14'])
        vids_difference = total_sum - vids_sum

        # Write sums below unmatched DataFrame with font size 8
        total_row = unmatched_start_row + len(unmatched_df) + 3
        worksheet.write(total_row, matched_df.columns.get_loc('Source Amount_T14') - 1, 'Total', cell_format)
        worksheet.write(total_row, matched_df.columns.get_loc('Source Amount_T14'), round(total_sum, 2), cell_format)

        vids_row = total_row + 1
        worksheet.write(vids_row, matched_df.columns.get_loc('Source Amount_T14') - 1, 'Vids', cell_format)
        worksheet.write(vids_row, matched_df.columns.get_loc('Source Amount_T14'), vids_sum, cell_format)

        diff_row = vids_row + 1
        worksheet.write(diff_row, matched_df.columns.get_loc('Source Amount_T14') - 1, 'Difference', cell_format)
        worksheet.write(diff_row, matched_df.columns.get_loc('Source Amount_T14'), diff, cell_format)

# Example usage:
# matched_df, unmatched_df = preprocess_data(vids, df)
# vids_sum, empty_invoices_sum, total, Trans_amt, diff = calculate_sums(matched_df, unmatched_df, df)
# save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, 'output.xlsx')

















import pandas as pd
from datetime import datetime

def preprocess_data(vids, df):
    # Preprocessing logic
    return matched_df, unmatched_df

def calculate_sums(matched_df, unmatched_df, df):
    # Calculation logic
    return vids_sum, empty_invoices_sum, total, Trans_amt, diff

def generate_output_filename(df):
    # Get the Company Name and Company Id from the DataFrame
    company_name = df['Company Name'].iloc[0]
    comp_id = df['Company Id'].iloc[0]

    # Get the current month and year in the specified format
    month_year = datetime.now().strftime("%b'%y")

    # Construct the output filename
    output_filename = f"Citi NA IN_{company_name}_Comp Id_{comp_id}_{month_year} (Billing Period) Cycle.xlsx"
    return output_filename

def save_to_excel(matched_df, unmatched_df, vids_sum, empty_invoices_sum, total, Trans_amt, diff, output_dir):
    # Generate the output file name
    output_filename = generate_output_filename(matched_df)  # Using matched_df for generating the file name

    # Create the full output file path
    output_path = output_dir + '/' + output_filename

    with pd.ExcelWriter(output_path, engine='xlsxwriter') as writer:
        # Write matched DataFrame
        matched_df.to_excel(writer, sheet_name='Sheet1', index=False, startrow=0, header=True)

        # Write unmatched DataFrame
        unmatched_start_row = len(matched_df) + 2
        unmatched_df.to_excel(writer, sheet_name='Sheet1', index=False, startrow=unmatched_start_row, header=True)

        # Get the workbook object
        workbook = writer.book

        # Write matched transactions label
        worksheet = writer.sheets['Sheet1']
        worksheet.write('A1', 'Matched Transactions')

        # Write unmatched transactions label
        unmatched_start_row = len(matched_df) + 2
        worksheet.write(unmatched_start_row, 0, 'Unmatched Transactions')

        # Get the formats
        header_format = workbook.add_format({'font_size': 8, 'bold': False, 'border': 0})
        cell_format = workbook.add_format({'font_size': 8})

        # Apply formatting to column headers for matched DataFrame
        for col_num, value in enumerate(matched_df.columns.values):
            worksheet.write(1, col_num, value, header_format)

        # Apply formatting to column headers for unmatched DataFrame
        for col_num, value in enumerate(unmatched_df.columns.values):
            worksheet.write(unmatched_start_row + 1, col_num, value, header_format)

        # Calculate and write the sum of the values
        total_sum = sum(matched_df['Source Amount_T14'])
        vids_difference = total_sum - vids_sum

        # Write sums below unmatched DataFrame with font size 8
        total_row = unmatched_start_row + len(unmatched_df) + 3
        worksheet.write(total_row, matched_df.columns.get_loc('Source Amount_T14') - 1, 'Total', cell_format)
        worksheet.write(total_row, matched_df.columns.get_loc('Source Amount_T14'), round(total_sum, 2), cell_format)

        vids_row = total_row + 1
        worksheet.write(vids_row, matche




        print(f"File saved successfully: {output_path}")
    except Exception as e:
        print(f"Error occurred while saving the file: {e}")
