def match_one_to_one(T5, Invoice_table):
    matching_invoices = []
    match_rule = None

    for Invoice in Invoice_table:
        for rule_index, rule in enumerate(rules, start=1):
            if rule(T5, Invoice=Invoice) and float(T5['fin_source_amt']) == float(Invoice['inv_match_source_amt']):
                matching_invoices.append((Invoice, rule_index))
                match_rule = rule_index

    if matching_invoices:
        return matching_invoices, match_rule
    return [], None


def match_bundle(T5, Invoice_table):
    matching_invoices = {}
    total_invoice_source_amt = 0
    match_rule = None

    for Invoice in Invoice_table:
        for rule_index, rule in enumerate(rules, start=1):
            if rule(T5, Invoice=Invoice):
                if rule_index not in matching_invoices:
                    matching_invoices[rule_index] = []
                matching_invoices[rule_index].append(Invoice)
                total_invoice_source_amt += float(Invoice['inv_match_source_amt'])
                match_rule = rule_index
                break

    if total_invoice_source_amt == float(T5['fin_source_amt']):
        return matching_invoices, match_rule
    return {}, None


output_rows_one_to_one = []
unmatched_output_rows_one_to_one = []
output_rows_bundle = []
unmatched_output_rows_bundle = []

matched_invoices = {}

for T5 in T5_table:
    matching_invoices, match_rule = match_one_to_one(T5, Invoice_table)
    match_type = "one-to-one"

    if matching_invoices:
        for invoice, rule_index in matching_invoices:
            description = rule_descriptions.get(rule_index)
            output_row = {column: T5[column] if column in T5 else invoice[column] for column in output_columns}
            output_row['Match Rule'] = rule_numbers.get(match_rule)
            output_row['Description'] = description
            output_row['Match Type'] = match_type
            output_rows_one_to_one.append(output_row)
        
        # Remove the matched transaction from T5_table
        T5_table = [T5_row for T5_row in T5_table if T5_row['fin_record_key'] != T5['fin_record_key']]
        unmatched_fin_record_keys.remove(T5['fin_record_key'])

        unmatched_indices = unmatched_output_df[
            (unmatched_output_df['fin_record_key'] == T5['fin_record_key']) &
            (unmatched_output_df['fin_source_amt'] == T5['fin_source_amt']) &
            (unmatched_output_df['fin_debit_credit_ind'] == T5['fin_debit_credit_ind'])
        ].index

        unmatched_output_df.drop(unmatched_indices, inplace=True)

    else:
        unmatched_output_row = {column: T5[column] if column in T5 else None for column in unmatched_output_columns}
        unmatched_output_rows_one_to_one.append(unmatched_output_row)
        unmatched_fin_record_keys.add(T5['fin_record_key'])

for T5 in T5_table:
    matching_invoices, match_rule = match_bundle(T5, Invoice_table)
    match_type = "bundle match"

    if len(matching_invoices) != len(rules):
        unmatched_output_rows_bundle.append(T5)
        continue

    for rule_index, invoices in matching_invoices.items():
        description = rule_descriptions.get(rule_index)
        for invoice in invoices:
            output_row = {column: T5[column] if column in T5 else invoice[column] for column in output_columns}
            output_row['Match Rule'] = rule_numbers.get(rule_index)
            output_row['Description'] = description
            output_row['Match Type'] = match_type
            output_rows_bundle.append(output_row)
