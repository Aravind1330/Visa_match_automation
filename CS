Developed a Spark engine to automate the manual matching process for Bundle and single matches. This system efficiently processes various issuers on a daily basis, categorized by region. The primary goal is to minimize manual effort, enhance operational efficiency, and facilitate multiple audits to ensure the robustness of the automated processes.



import dash
from dash import dcc, html
import plotly.express as px
import pandas as pd

# Assuming you have five dataframes df1, df2, df3, df4, df5

# Dummy DataFrames for demonstration
df1 = pd.DataFrame({'X': [1, 2, 3], 'Y': [4, 1, 2]})
df2 = pd.DataFrame({'X': [4, 5, 6], 'Y': [3, 5, 1]})
df3 = pd.DataFrame({'X': [7, 8, 9], 'Y': [2, 6, 4]})
df4 = pd.DataFrame({'X': [10, 11, 12], 'Y': [5, 2, 7]})
df5 = pd.DataFrame({'X': [13, 14, 15], 'Y': [1, 3, 6]})

# Concatenate the dataframes into a single dataframe
combined_df = pd.concat([df1, df2, df3, df4, df5], keys=['df1', 'df2', 'df3', 'df4', 'df5'])

# Create Dash app
app = dash.Dash(__name__)

# Define the layout of the app
app.layout = html.Div([
    html.H1("Stats UI using Dash and Plotly"),
    
    # Dropdown for selecting DataFrame
    dcc.Dropdown(
        id='dataframe-dropdown',
        options=[
            {'label': 'DataFrame 1', 'value': 'df1'},
            {'label': 'DataFrame 2', 'value': 'df2'},
            {'label': 'DataFrame 3', 'value': 'df3'},
            {'label': 'DataFrame 4', 'value': 'df4'},
            {'label': 'DataFrame 5', 'value': 'df5'},
        ],
        value='df1',  # Default selected value
        style={'width': '50%'}
    ),
    
    # Scatter plot based on selected DataFrame
    dcc.Graph(id='scatter-plot'),
])

# Define callback to update scatter plot based on selected DataFrame
@app.callback(
    dash.dependencies.Output('scatter-plot', 'figure'),
    [dash.dependencies.Input('dataframe-dropdown', 'value')]
)
def update_scatter_plot(selected_df):
    selected_data = combined_df.loc[selected_df]
    fig = px.scatter(selected_data, x='X', y='Y', title=f'Scatter Plot for {selected_df}')
    return fig

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)
