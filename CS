    workbook  = writer.book
    worksheet = writer.sheets['Sheet1']

    # Define the format for the header cells (light blue color)
    header_format = workbook.add_format({'bg_color': '#add8e6'})

    # Apply the header format to the header row
    for col_num, value in enumerate(merged_df.columns.values):
        worksheet.write(0, col_num, value, header_format)


 # Get the xlsxwriter workbook and worksheet objects
    workbook  = writer.book
    worksheet = writer.sheets['Sheet1']

    # Define the format for the header cells (light blue color)
    header_format = workbook.add_format({'bg_color': '#add8e6'})

    # Apply the header format to the header rows
    for col_num, value in enumerate(merged_df.columns.values):
        worksheet.write(0, col_num, value, header_format)

    # Apply the header format to the second set of column names (from empty_w_rows)
    for col_num, value in enumerate(empty_w_rows.columns.values):
        worksheet.write(0, col_num + len(df.columns), value, header_format)




empty_w_rows['signed_source_amt'] = pd.to_numeric(empty_w_rows['signed_source_amt'], errors='coerce')
empty_w_rows['signed_source_amt'] = empty_w_rows.apply(lambda row: -row['signed_source_amt'] if row['trans_type_code'] == 11 else row['signed_source_amt'], axis=1)



mask = (empty_w_rows['trans_type_code'] == 11) & (empty_w_rows['signed_source_amt'] > 0)  # Only positive values
empty_w_rows.loc[mask, 'signed_source_amt'] *= -1









import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill

# Assuming your CSV file is named 'your_file.csv'
file_path = 'your_file.csv'

# Read the CSV file into a pandas DataFrame
df = pd.read_csv(file_path)

# Separate rows with empty values in column 'W'
empty_w_rows = df[df['W'].isnull()]

# Remove duplicates from empty_w_rows based on subset of columns 'a' and 'b'
empty_w_rows = empty_w_rows.drop_duplicates(subset=['a', 'b'])

# Convert 'signed_source_amt' to the appropriate numeric type, handling errors
empty_w_rows['signed_source_amt'] = pd.to_numeric(empty_w_rows['signed_source_amt'], errors='coerce')

# Conditionally update 'signed_source_amt' based on 'trans_type_code'
empty_w_rows.loc[empty_w_rows['trans_type_code'] == 11, 'signed_source_amt'] *= -1

# Copy values from 'signed_source_amt' to 'source_amt' in the empty_w_rows DataFrame
empty_w_rows.loc[:, 'source_amt'] = empty_w_rows['signed_source_amt']

# Remove rows with empty values in column 'W' from the original DataFrame
df = df.dropna(subset=['W'])

# Merge the two DataFrames (df and empty_w_rows) into a single DataFrame
merged_df = pd.concat([df, empty_w_rows], ignore_index=True)

# Initialize a workbook
wb = Workbook()

# Create a worksheet
ws = wb.active
ws.title = 'Sheet1'

# Set font size to 8 for the entire sheet
for row in ws.iter_rows():
    for cell in row:
        cell.font = Font(size=8)

# Add 4 blank rows at the end of 'signed_source_amt' column
total_rows_start = len(merged_df)
total_rows_end = total_rows_start + 4

# Apply light blue color to column names
for col_idx, col_name in enumerate(merged_df.columns):
    cell = ws.cell(row=1, column=col_idx+1)
    cell.value = col_name
    cell.fill = PatternFill(start_color="ADD8E6", end_color="ADD8E6", fill_type="solid")
    cell.font = Font(size=8)

# Calculate the sum of 'signed_source_amt' considering positive and negative values, excluding non-numeric values
total_sum_signed_source_amt = merged_df['signed_source_amt'].sum(skipna=True)

# Write 'Total' and its value
ws.cell(row=total_rows_end, column=1).value = 'Total'
ws.cell(row=total_rows_end, column=2).value = total_sum_signed_source_amt

# Load the second Excel sheet with 'tranamt' column
sheet2_df = pd.read_excel('second_sheet.xlsx')  # Provide the correct file name

# Calculate the sum of 'tranamt' column and round to two decimal places
sum_tranamt = round(sheet2_df['tranamt'].sum(skipna=True), 2)

# Write 'Sum Tranamt' and its value
ws.cell(row=total_rows_end + 1, column=1).value = 'Sum Tranamt'
ws.cell(row=total_rows_end + 1, column=2).value = sum_tranamt

# Calculate the difference between Total and Sum Tranamt
difference = total_sum_signed_source_amt - sum_tranamt

# Write 'Difference' and its value
ws.cell(row=total_rows_end + 2, column=1).value = 'Difference'
ws.cell(row=total_rows_end + 2, column=2).value = difference

# Save the workbook
wb.save('output_file.xlsx')













import os
import preprocess_file
import pandas as pd

def generate_excel_file(merged_df, second_sheet_path, output_path):
    with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
        # Write merged DataFrame to 'Sheet1'
        merged_df.to_excel(writer, sheet_name='Sheet1', index=False)

        # Add 4 blank rows at the end of 'signed_source_amt' column
        total_rows_start = len(merged_df)
        for i in range(4):
            writer.sheets['Sheet1'].write(total_rows_start + i, merged_df.columns.get_loc('signed_source_amt'), '', None)

        # Calculate the sum of 'signed_source_amt' considering positive and negative values, excluding non-numeric values
        total_sum_signed_source_amt = merged_df['signed_source_amt'].sum(skipna=True)
        writer.sheets['Sheet1'].write(total_rows_start + 4, merged_df.columns.get_loc('signed_source_amt'), 'Total', None)
        writer.sheets['Sheet1'].write(total_rows_start + 4, merged_df.columns.get_loc('signed_source_amt') + 1, total_sum_signed_source_amt)

        # Load the second Excel sheet with 'tranamt' column
        sheet2_df = pd.read_excel(second_sheet_path)

        # Calculate the sum of 'tranamt' column and round to two decimal places
        sum_tranamt = round(sheet2_df['tranamt'].sum(skipna=True), 2)

        # Add the sum of 'tranamt' below the total of 'signed_source_amt'
        writer.sheets['Sheet1'].write(total_rows_start + 5, merged_df.columns.get_loc('signed_source_amt'), 'Sum Tranamt', None)
        writer.sheets['Sheet1'].write(total_rows_start + 5, merged_df.columns.get_loc('signed_source_amt') + 1, sum_tranamt)

        # Calculate the difference between Total and Sum Tranamt
        difference = total_sum_signed_source_amt - sum_tranamt
        writer.sheets['Sheet1'].write(total_rows_start + 6, merged_df.columns.get_loc('signed_source_amt'), 'Difference', None)
        writer.sheets['Sheet1'].write(total_rows_start + 6, merged_df.columns.get_loc('signed_source_amt') + 1, difference)

def main():
    # Input and output file paths
    input_folder = 'input'
    output_folder = 'output'
    file_path = os.path.join(input_folder, 'your_file.csv')
    output_path = os.path.join(output_folder, 'output_file.xlsx')
    second_sheet_path = os.path.join(input_folder, 'second_sheet.xlsx')

    # Preprocess data
    merged_df = preprocess_file.preprocess_data(file_path)

    # Generate Excel file
    generate_excel_file(merged_df, second_sheet_path, output_path)

if __name__ == "__main__":
    main()















import os
import preprocess_file
import pandas as pd
import config

def generate_excel_file(merged_df, second_sheet_path, output_path):
    with pd.ExcelWriter(output_path, engine='openpyxl') as writer:
        # Write merged DataFrame to 'Sheet1'
        merged_df.to_excel(writer, sheet_name='Sheet1', index=False)

        # Add 4 blank rows at the end of 'signed_source_amt' column
        total_rows_start = len(merged_df)
        for i in range(4):
            writer.sheets['Sheet1'].write(total_rows_start + i, merged_df.columns.get_loc('signed_source_amt'), '', None)

        # Calculate the sum of 'signed_source_amt' considering positive and negative values, excluding non-numeric values
        total_sum_signed_source_amt = merged_df['signed_source_amt'].sum(skipna=True)
        writer.sheets['Sheet1'].write(total_rows_start + 4, merged_df.columns.get_loc('signed_source_amt'), 'Total', None)
        writer.sheets['Sheet1'].write(total_rows_start + 4, merged_df.columns.get_loc('signed_source_amt') + 1, total_sum_signed_source_amt)

        # Load the second Excel sheet with 'tranamt' column
        sheet2_df = pd.read_excel(second_sheet_path)

        # Calculate the sum of 'tranamt' column and round to two decimal places
        sum_tranamt = round(sheet2_df['tranamt'].sum(skipna=True), 2)

        # Add the sum of 'tranamt' below the total of 'signed_source_amt'
        writer.sheets['Sheet1'].write(total_rows_start + 5, merged_df.columns.get_loc('signed_source_amt'), 'Sum Tranamt', None)
        writer.sheets['Sheet1'].write(total_rows_start + 5, merged_df.columns.get_loc('signed_source_amt') + 1, sum_tranamt)

        # Calculate the difference between Total and Sum Tranamt
        difference = total_sum_signed_source_amt - sum_tranamt
        writer.sheets['Sheet1'].write(total_rows_start + 6, merged_df.columns.get_loc('signed_source_amt'), 'Difference', None)
        writer.sheets['Sheet1'].write(total_rows_start + 6, merged_df.columns.get_loc('signed_source_amt') + 1, difference)

def main():
    # Input and output file paths
    input_folder = config.INPUT_FOLDER
    output_folder = config.OUTPUT_FOLDER
    input_file = config.INPUT_FILE
    output_file = config.OUTPUT_FILE
    second_sheet_file = config.SECOND_SHEET_FILE

    input_file_path = os.path.join(input_folder, input_file)
    output_file_path = os.path.join(output_folder, output_file)
    second_sheet_path = os.path.join(input_folder, second_sheet_file)

    # Preprocess data
    merged_df = preprocess_file.preprocess_data(input_file_path)

    # Generate Excel file
    generate_excel_file(merged_df, second_sheet_path, output_file_path)

if __name__ == "__main__":
    main()





import pandas as pd

def preprocess_data(file_path):
    # Read the CSV file into a pandas DataFrame
    df = pd.read_csv(file_path)

    # Separate rows with empty values in column 'W'
    empty_w_rows = df[df['W'].isnull()]

    # Remove duplicates from empty_w_rows based on subset of columns 'a' and 'b'
    empty_w_rows = empty_w_rows.drop_duplicates(subset=['a', 'b'])

    # Convert 'signed_source_amt' to the appropriate numeric type, handling errors
    empty_w_rows['signed_source_amt'] = pd.to_numeric(empty_w_rows['signed_source_amt'], errors='coerce')

    # Conditionally update 'signed_source_amt' based on 'trans_type_code'
    empty_w_rows.loc[empty_w_rows['trans_type_code'] == 11, 'signed_source_amt'] *= -1

    # Copy values from 'signed_source_amt' to 'source_amt' in the empty_w_rows DataFrame
    empty_w_rows.loc[:, 'source_amt'] = empty_w_rows['signed_source_amt']

    # Remove rows with empty values in column 'W' from the original DataFrame
    df = df.dropna(subset=['W'])

    # Merge the two DataFrames (df and empty_w_rows) into a single DataFrame
    merged_df = pd.concat([df, empty_w_rows], ignore_index=True)

    return merged_df



RIGHT([File Name], LEN([File Name]) - 8)
CONTAINS([File Name], [Extracted Substring])
{FIXED [File Keys] : MIN([Category])}
{ FIXED [File Name] : MAX([File ID]) }
REPLACE(REPLACE([Your Column], "_reprocess", ""), "_file", "")


IF [Category] = 'error' OR [Category] = 'fileerror' OR [Category] = 'parser' THEN 'Above' END
IF [Category] = 'completed' THEN 'Below' END



IF [Category] = 'error' OR [Category] = 'fileerror' OR [Category] = 'parser' THEN 'Above'
ELSEIF [Category] = 'completed' THEN 'Below'
END




import pandas as pd
from fbprophet import Prophet

# Load data
data = pd.read_csv("your_data.csv")

# Data Preprocessing
# Assuming data preprocessing involves handling missing values and dropping unnecessary columns
data.dropna(inplace=True)
data.drop(columns=['fin_record_key', 'fin_acct_num (masked)', 'fin_ticket_num', 'fin_purch_id',
                   'fin_auth_nbr', 'fin_region_id', 'fin_processor_id', 'fin_member_bank_id',
                   'mem_member_bank_name', 'fin_company_id', 'fin_trans_type',
                   'com_company_name', 'fin orig_trans _ref_num', 'fin_sector_type_cd',
                   'fin_source_curr_cd', 'fin_comm_file_id', 'fin_file_id', 'fin_merch__catg_cd',
                   'fin_purch_id_format', 'fin_trans_file_load_dt', 'fin_trans_ref_num',
                   'issuer_id and Name', 'company_id and name'], inplace=True)

# Feature Engineering
# Convert date columns to datetime format
data['fin_posting_dt'] = pd.to_datetime(data['fin_posting_dt'])
data['fin_trans_dt'] = pd.to_datetime(data['fin_trans_dt'])

# Date Features
data['posting_day'] = data['fin_posting_dt'].dt.day
data['posting_month'] = data['fin_posting_dt'].dt.month
data['posting_year'] = data['fin_posting_dt'].dt.year
data['trans_day'] = data['fin_trans_dt'].dt.day
data['trans_month'] = data['fin_trans_dt'].dt.month
data['trans_year'] = data['fin_trans_dt'].dt.year

# Transaction Frequency
data['trans_count'] = data.groupby('fin_acct_num')['fin_source_amt'].transform('count')

# Transaction Lag Features
data['prev_trans_amt'] = data.groupby('fin_acct_num')['fin_source_amt'].shift(1)

# Model Training
train_size = int(len(data) * 0.8)
train_data, test_data = data[:train_size], data[train_size:]

model = Prophet()
model.fit(train_data.rename(columns={"fin_posting_dt": "ds", "fin_source_amt": "y"}))

# Model Evaluation
future = model.make_future_dataframe(periods=len(test_data))
forecast = model.predict(future)

# Forecasting for the next 5 years
future_years = model.make_future_dataframe(periods=5*365)
forecast_future = model.predict(future_years)

# Plot forecast
fig = model.plot(forecast_future)

# Show plot
fig.show()













import pandas as pd

# Load data
data = pd.read_csv("your_data.csv")

# Display basic information about the dataset
print("Data shape:", data.shape)
print("\nColumns:", data.columns)
print("\nData types:\n", data.dtypes)
print("\nHead of the data:\n", data.head())


import matplotlib.pyplot as plt
import seaborn as sns

# Summary statistics of numerical variables
print("\nSummary statistics of numerical variables:\n", data.describe())

# Distribution of numerical variables
plt.figure(figsize=(10, 6))
sns.histplot(data['fin_source_amt'], bins=20, kde=True)
plt.title('Distribution of Transaction Amount')
plt.xlabel('Transaction Amount')
plt.ylabel('Frequency')
plt.show()

# Distribution of categorical variables
plt.figure(figsize=(10, 6))
sns.countplot(data['fin_debit_credit_ind'])
plt.title('Distribution of Debit/Credit Indication')
plt.xlabel('Debit/Credit Indication')
plt.ylabel('Count')
plt.show()

# Relationship between variables
plt.figure(figsize=(10, 6))
sns.scatterplot(x='fin_source_amt', y='fin_billing_amt', data=data)
plt.title('Relationship between Source Amount and Billing Amount')
plt.xlabel('Source Amount')
plt.ylabel('Billing Amount')
plt.show()

# Temporal patterns in transaction data
plt.figure(figsize=(14, 6))
sns.lineplot(x='fin_posting_dt', y='fin_source_amt', data=data)
plt.title('Transaction Amount Over Time')
plt.xlabel('Posting Date')
plt.ylabel('Transaction Amount')
plt.show()


# Distribution of Transaction Amount by Transaction Type
plt.figure(figsize=(10, 6))
sns.boxplot(x='fin_debit_credit_ind', y='fin_source_amt', data=data)
plt.title('Transaction Amount by Debit/Credit Indication')
plt.xlabel('Debit/Credit Indication')
plt.ylabel('Transaction Amount')
plt.show()

# Transaction Amount Over Time by Supplier
plt.figure(figsize=(14, 6))
sns.lineplot(x='fin_posting_dt', y='fin_source_amt', hue='fin_orig_supplier_nm', data=data)
plt.title('Transaction Amount Over Time by Supplier')
plt.xlabel('Posting Date')
plt.ylabel('Transaction Amount')
plt.legend(title='Supplier', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

# Monthly Total Transaction Amount
data['month_year'] = data['fin_posting_dt'].dt.to_period('M')
monthly_total = data.groupby('month_year')['fin_source_amt'].sum()
plt.figure(figsize=(12, 6))
monthly_total.plot(kind='line', marker='o')
plt.title('Monthly Total Transaction Amount')
plt.xlabel('Month')
plt.ylabel('Total Transaction Amount')
plt.show()

# Transaction Frequency by Account
plt.figure(figsize=(10, 6))
sns.histplot(data['trans_count'], bins=20, kde=True)
plt.title('Distribution of Transaction Frequency by Account')
plt.xlabel('Transaction Frequency')
plt.ylabel('Count')
plt.show()

# Correlation Heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

# Transaction Amount Distribution by Currency
plt.figure(figsize=(10, 6))
sns.boxplot(x='fin_billing_curr_cd', y='fin_source_amt', data=data)
plt.title('Transaction Amount by Currency')
plt.xlabel('Billing Currency')
plt.ylabel('Transaction Amount')
plt.show()

# Transaction Amount Outliers
plt.figure(figsize=(10, 6))
sns.boxplot(y='fin_source_amt', data=data)
plt.title('Transaction Amount Outliers')
plt.ylabel('Transaction Amount')
plt.show()

# Transaction Amount by Merchant Category
plt.figure(figsize=(12, 6))
sns.boxplot(x='fin_supplier_nm', y='fin_source_amt', data=data)
plt.title('Transaction Amount by Merchant Category')
plt.xlabel('Merchant Category')
plt.ylabel('Transaction Amount')
plt.xticks(rotation=90)
plt.show()





import pandas as pd

# Assuming your data is stored in a CSV file named 'transactions.csv'
# Load the data into a pandas DataFrame
df = pd.read_csv('transactions.csv')

# Parse the posting date to extract the month
df['fin_posting_dt'] = pd.to_datetime(df['fin_posting_dt'], format='%d/%m/%Y')
df['posting_month'] = df['fin_posting_dt'].dt.to_period('M')

# Filter transactions where the source amount is greater than 5000
df_filtered = df[df['fin_source_amt'] > 5000]

# Group by masked account number and posting month, and count transactions
result = df_filtered.groupby(['fin_acct_num (masked)', 'posting_month']).size().reset_index(name='transaction_count')

# Display the result
print(result)


result = df_filtered.groupby(['fin_acct_num (masked)', 'posting_month']).agg(transaction_count=('fin_source_amt', 'count'), volume_amount=('fin_source_amt', 'sum')).reset_index()



print("<font size='2'>")
print(result)
print("</font>")






import pandas as pd
from openpyxl.styles import Font, Color
from openpyxl.styles.colors import ColorChoice
from openpyxl.utils.dataframe import dataframe_to_rows

# Assuming your CSV file is named 'your_file.csv'
file_path = 'your_file.csv'

# Read the CSV file into a pandas DataFrame
df = pd.read_csv(file_path)

# Separate rows with empty values in column 'W'
empty_w_rows = df[df['W'].isnull()]

# Remove duplicates from empty_w_rows based on subset of columns 'a' and 'b'
empty_w_rows = empty_w_rows.drop_duplicates(subset=['a', 'b'])

# Convert 'signed_source_amt' to the appropriate numeric type, handling errors
empty_w_rows['signed_source_amt'] = pd.to_numeric(empty_w_rows['signed_source_amt'], errors='coerce')

# Conditionally update 'signed_source_amt' based on 'trans_type_code'
empty_w_rows.loc[empty_w_rows['trans_type_code'] == 11, 'signed_source_amt'] *= -1

# Copy values from 'signed_source_amt' to 'source_amt' in the empty_w_rows DataFrame
empty_w_rows.loc[:, 'source_amt'] = empty_w_rows['signed_source_amt']

# Remove rows with empty values in column 'W' from the original DataFrame
df = df.dropna(subset=['W'])

# Merge the two DataFrames (df and empty_w_rows) into a single DataFrame
merged_df = pd.concat([df, empty_w_rows], ignore_index=True)

# Save the merged DataFrame to an Excel file with a gap of 2 lines after sheet 1
with pd.ExcelWriter('output_file.xlsx', engine='openpyxl') as writer:
    # Write DataFrame to Excel file
    merged_df.iloc[:len(df)].to_excel(writer, sheet_name='Sheet1', index=False)
    merged_df.iloc[len(df):].to_excel(writer, sheet_name='Sheet1', startrow=len(df), index=False)

    # Accessing the workbook and worksheet
    wb = writer.book
    ws = writer.sheets['Sheet1']

    # Set font size to 8 for all cells
    for row in ws.iter_rows():
        for cell in row:
            cell.font = Font(size=8)

    # Set light blue color for column headings
    for cell in ws[1]:
        cell.font = Font(color="00CCFF", bold=True)

    # Add 4 blank rows at the end of 'signed_source_amt' column
    total_rows_start = len(merged_df)
    total_rows_end = total_rows_start + 4
    ws.cell(row=total_rows_start, column=merged_df.columns.get_loc('signed_source_amt')).value = ''
    ws.cell(row=total_rows_start + 1, column=merged_df.columns.get_loc('signed_source_amt')).value = ''
    ws.cell(row=total_rows_start + 2, column=merged_df.columns.get_loc('signed_source_amt')).value = ''
    ws.cell(row=total_rows_start + 3, column=merged_df.columns.get_loc('signed_source_amt')).value = ''

    # Calculate the sum of 'signed_source_amt' considering positive and negative values, excluding non-numeric values
    total_sum_signed_source_amt = merged_df['signed_source_amt'].sum(skipna=True)
    ws.cell(row=total_rows_end, column=merged_df.columns.get_loc('signed_source_amt')).value = 'Total'
    ws.cell(row=total_rows_end, column=merged_df.columns.get_loc('signed_source_amt') + 1).value = total_sum_signed_source_amt

    # Load the second Excel sheet with 'tranamt' column
    sheet2_df = pd.read_excel('second_sheet.xlsx')  # Provide the correct file name

    # Calculate the sum of 'tranamt' column and round to two decimal places
    sum_tranamt = round(sheet2_df['tranamt'].sum(skipna=True), 2)

    # Add the sum of 'tranamt' below the total of 'signed_source_amt'
    ws.cell(row=total_rows_end + 1, column=merged_df.columns.get_loc('signed_source_amt')).value = 'Sum Tranamt'
    ws.cell(row=total_rows_end + 1, column=merged_df.columns.get_loc('signed_source_amt') + 1).value = sum_tranamt

    # Calculate the difference between Total and Sum Tranamt
    difference = total_sum_signed_source_amt - sum_tranamt
    ws.cell(row=total_rows_end + 2, column=merged_df.columns.get_loc('signed_source_amt')).value = 'Difference'
    ws.cell(row=total_rows_end + 2, column=merged_df.columns.get_loc('signed_source_amt') + 1).value = difference

# Save the workbook
wb.save('output_file.xlsx')



    # Set light blue color for column headings
    for cell in ws[1]:
        cell.font = Font(color="FFFFFF", bold=True)
        cell.fill = PatternFill(start_color='00CCFF', end_color='00CCFF', fill_type='solid')





SELECT DISTINCT A.*, B.COMPANY_NM, B.ISSUER_NM
FROM CDSLTAP1.TCOSUB_CTA_ACCT A
LEFT OUTER JOIN CDSLTAP1.TCOLKP_COMPANY B 
    ON A.REGION_ID = B.REGION_ID
    AND A.PROCESSOR_ID = B.PROCESSOR_ID
    AND A.MEMBER_BANK_ID = B.MEMBER_BANK_ID
    AND A.COMPANY_ID = B.COMPANY_ID
WHERE A.REGION_ID = 6;



 # Get the workbook and worksheet objects
    workbook = writer.book
    worksheet = writer.sheets['Sheet1']

    # Set font size to 8 for the entire sheet
    cell_format = workbook.add_format({'font_size': 8})
    worksheet.set_column(0, len(merged_df.columns) - 1, None, cell_format)

   # Set font size to 8 for column names
    header_format = workbook.add_format({'font_size': 8, 'bold': True})
    for col_num, value in enumerate(merged_df.columns.values):
        worksheet.write(0, col_num, value, header_format)



    # Set font size to 8 for the entire sheet
    cell_format = workbook.add_format({'font_size': 8})
    worksheet.set_column(0, len(merged_df.columns) - 1, None, cell_format)

    # Set font size to 8 for column names after the gap
    for col_num, value in enumerate(merged_df.columns.values):
        worksheet.write(len(df) + 2, col_num, value, cell_format)



    # Set blue background color for column header row after the gap
    blue_format = workbook.add_format({'font_size': 8, 'bg_color': '#b8cce4'})
    for col_num, value in enumerate(merged_df.columns.values):
        worksheet.write(len(df) + 2, col_num, value, blue_format)
