import pandas as pd

def one_to_one_match(T5, Invoice_table):
    for i, rule in enumerate(rules):
        if rule(T5, Invoice_table):
            return True, i + 1
    return False, "Unmatched"

def bundle_match(T5, Invoice_table):
    matching_invoices = []
    total_invoice_source_amt = 0
    match_rule = None

    for i, Invoice in enumerate(Invoice_table):
        for rule_index, rule in enumerate(rules, start=1):
            if rule(T5, Invoice=Invoice):
                matching_invoices.append((Invoice, rule_index))
                total_invoice_source_amt += Invoice['inv_match_source_amt']
                match_rule = rule_index

    if total_invoice_source_amt == T5['fin_source_amt']:
        return matching_invoices, match_rule
    return [], None

# Process one-to-one matches
output_rows_one_to_one = []
unmatched_output_rows_one_to_one = []
unmatched_fin_record_keys = set(T5['fin_record_key'] for T5 in T5_table)  # Set to store unmatched fin_record_keys

for T5 in T5_table:
    match_found, match_rule = one_to_one_match(T5, IV_table)
    if match_found:
        matching_invoice, rule_index = match_found
        description = rule_descriptions.get(match_rule)
        output_row = {column: T5[column] if column in T5 else matching_invoice[column] for column in output_columns}
        output_row['Match Rule'] = rule_numbers.get(match_rule)
        output_row['description'] = description
        output_row['Match Type'] = "one-to-one"
        output_rows_one_to_one.append(output_row)
        matched_invoices.append(matching_invoice)

        # Remove the matched transaction from T5_table
        T5_table = [T5_row for T5_row in T5_table if T5_row['fin_record_key'] != T5['fin_record_key']]
        unmatched_fin_record_keys.remove(T5['fin_record_key'])  # Remove matched fin_record_key
    else:
        unmatched_output_row = {column: T5[column] if column in T5 else None for column in unmatched_output_columns}
        unmatched_output_rows_one_to_one.append(unmatched_output_row)
        unmatched_fin_record_keys.add(T5['fin_record_key'])  # Add unmatched fin_record_key

# Process bundle matches
output_rows_bundle = []
unmatched_output_rows_bundle = []

for T5 in unmatched_output_rows_one_to_one:
    matching_invoices, match_rule = bundle_match(T5, IV_table)
    if matching_invoices:
        for invoice, rule_index in matching_invoices:
            description = rule_descriptions.get(rule_index)
            output_row = {column: T5[column] if column in T5 else invoice[column] for column in output_columns}
            output_row['Match Rule'] = rule_numbers.get(match_rule)
            output_row['description'] = description
            output_row['Match Type'] = "bundle match"
            output_rows_bundle.append(output_row)
            matched_invoices.append(invoice)

            # Remove the matched transaction from T5_table
            T5_table = [T5_row for T5_row in T5_table if T5_row['fin_record_key'] != T5['fin_record_key']]
            unmatched_fin_record_keys.remove(T5['fin_record_key'])  # Remove matched fin_record_key
    else:
        unmatched_output_rows_bundle.append(T5)

# Combine the output rows from one-to-one matches and bundle matches
output_rows = output_rows_one_to_one + output_rows_bundle
unmatched_output_rows = unmatched_output_rows_bundle

# Create a DataFrame from the output rows
output_df = pd.DataFrame(output_rows, columns=output_columns)

# Create a DataFrame for unmatched transactions from T5_table
unmatched_transactions_df = pd.DataFrame([T5 for T5 in T5_table if T5['fin_record_key'] in unmatched_fin_record_keys])

# Write the unmatched transactions to a CSV file
unmatched_transactions_df.to_csv("unmatched_transactions.csv", index=False)

# Write the output data to a CSV file
output_df.to_csv(config['output_files']['output_file'], index=False)

# Write the aggregated data to Excel
with pd.ExcelWriter(config['output_files']['output_file']) as writer:
    output_df.to_excel(writer, sheet_name='Output', index=False)





















# Create a DataFrame from the output rows
output_df = pd.DataFrame(output_rows, columns=output_columns)

# Create a DataFrame for unmatched transactions from T5_table
unmatched_transactions_df = pd.DataFrame([T5 for T5 in T5_table if T5['fin_record_key'] in unmatched_fin_record_keys])

# Append the new unmatched transactions to the existing unmatched_transactions_df
unmatched_transactions_df = unmatched_transactions_df.append(unmatched_output_rows, ignore_index=True)

# Remove duplicates from unmatched_transactions_df based on fin_record_key
unmatched_transactions_df.drop_duplicates(subset=['fin_record_key'], inplace=True)

# Write the unmatched transactions to a CSV file
unmatched_transactions_df.to_csv("unmatched_transactions.csv", index=False)

# Write the output data to a CSV file
output_df.to_csv(config['output_files']['output_file'], index=False)

# Write the aggregated data to Excel
with pd.ExcelWriter(config['output_files']['output_file']) as writer:
    output_df.to_excel(writer, sheet_name='Output', index=False)
