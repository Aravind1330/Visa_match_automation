def match_one_to_one(T5, Invoice_table):
    matching_invoices = []
    match_rule = None

    for Invoice in Invoice_table:
        for rule_index, rule in enumerate(rules, start=1):
            if rule(T5, Invoice=Invoice) and float(T5['fin_source_amt']) == float(Invoice['inv_match_source_amt']):
                matching_invoices.append((Invoice, rule_index))
                match_rule = rule_index
                break

        if matching_invoices:
            return matching_invoices, match_rule

    return [], None


def match_bundle(T5, Invoice_table):
    matching_invoices = []
    total_invoice_source_amt = 0
    match_rule = None

    for Invoice in Invoice_table:
        for rule_index, rule in enumerate(rules, start=1):
            if rule(T5, Invoice=Invoice):
                matching_invoices.append((Invoice, rule_index))
                total_invoice_source_amt += float(Invoice['inv_match_source_amt'])
                break

        if total_invoice_source_amt == float(T5['fin_source_amt']):
            return matching_invoices, match_rule

    return [], None


output_rows_one_to_one = []
unmatched_output_rows_one_to_one = []
output_rows_bundle = []
unmatched_output_rows_bundle = []
matched_invoices = []

for T5 in T5_table:
    matching_invoices, match_rule = match_one_to_one(T5, Invoice_table)
    match_type = "one-to-one"

    if matching_invoices:
        for invoice, rule_index in matching_invoices:
            description = rule_descriptions.get(rule_index)
            output_row = {column: T5[column] if column in T5 else invoice[column] for column in output_columns}
            output_row['Match Rule'] = rule_numbers.get(match_rule)
            output_row['Description'] = description
            output_row['Match Type'] = match_type
            output_rows_one_to_one.append(output_row)
            matched_invoices.append(invoice)

        # Remove the matched invoice from Invoice_table
        Invoice_table = [inv for inv in Invoice_table if inv not in matched_invoices]

        # Remove the matched transaction from T5_table
        T5_table = [T5_row for T5_row in T5_table if T5_row['fin_record_key'] != T5['fin_record_key']]
        unmatched_fin_record_keys.remove(T5['fin_record_key'])

        unmatched_indices = unmatched_output_df[
            (unmatched_output_df['fin_record_key'] == T5['fin_record_key']) &
            (unmatched_output_df['fin_source_amt'] == T5['fin_source_amt']) &
            (unmatched_output_df['fin_debit_credit_ind'] == T5['fin_debit_credit_ind'])
        ].index

        unmatched_output_df.drop(unmatched_indices, inplace=True)

    else:
        unmatched_output_row = {column: T5[column] if column in T5 else None for column in unmatched_output_columns}
        unmatched_output_rows_one_to_one.append(unmatched_output_row)
        unmatched_fin_record_keys.add(T5['fin_record_key'])

for T5 in T5_table:
    matching_invoices, match_rule = match_bundle(T5, Invoice_table)
    match_type = "bundle match"

    if matching_invoices:
        for invoice, rule_index in matching_invoices:
            description = rule_descriptions.get(rule_index)
            output_row = {column: T5[column] if column in T5 else invoice[column] for column in output_columns}
            output_row['Match Rule'] = rule_numbers.get(match_rule)
            output_row['Description'] = description
            output_row['Match Type'] = match_type
            output_rows_bundle.append(output_row)
            matched_invoices.append(invoice)

        # Remove the matched invoices from Invoice_table
        Invoice_table = [inv for inv in Invoice_table if inv not in matched_invoices]

        # Remove the matched transaction from T5_table
        T5_table = [T5_row for T5_row in T5_table if T5_row['fin_record_key'] != T5['fin_record_key']]
        unmatched_fin_record_keys.discard(T5['fin_record_key'])

        unmatched_indices = unmatched_output_df[
            (unmatched_output_df['fin_record_key'] == T5['fin_record_key']) &
            (unmatched_output_df['fin_source_amt'] == T5['fin_source_amt'])
        ].index

        unmatched_output_df.drop(unmatched_indices, inplace=True)

    else:
        unmatched_output_rows_bundle.append(T5)












import re

def is_valid_rule(T5, Invoice):
    authno_T5 = T5['authno']
    authno_Invoice = Invoice['authno']

    if authno_T5.isalpha() and authno_Invoice.isalpha():
        return False  # Both values are alphabetic, so not a valid match
    else:
        return authno_T5 == authno_Invoice

def match_one_to_one(T5, Invoice_table):
    matching_invoices = []
    match_rule = None
    invoices_to_remove = []

    for Invoice in Invoice_table:
        for rule_index, rule in enumerate(rules, start=1):
            if (
                rule(T5, Invoice=Invoice)
                and float(T5['fin_source_amt']) == float(Invoice['inv_match_source_amt'])
                and is_valid_rule(T5, Invoice)  # Check if the rule is valid
            ):
                matching_invoices.append((Invoice, rule_index))
                match_rule = rule_index
                invoices_to_remove.append(Invoice)
                break

    for invoice in invoices_to_remove:
        Invoice_table.remove(invoice)

    if matching_invoices:
        return matching_invoices, match_rule
    else:
        return [], None


def match_bundle(T5, Invoice_table):
    matching_invoices = []
    total_invoice_source_amt = 0
    match_rule = None
    invoices_to_remove = []

    for Invoice in Invoice_table:
        for rule_index, rule in enumerate(rules, start=1):
            if (
                rule(T5, Invoice=Invoice)
                and is_valid_rule(T5, Invoice)  # Check if the rule is valid
            ):
                matching_invoices.append((Invoice, rule_index))
                total_invoice_source_amt += float(Invoice['inv_match_source_amt'])
                invoices_to_remove.append(Invoice)

        if total_invoice_source_amt == float(T5['fin_source_amt']):
            break

    for invoice in invoices_to_remove:
        Invoice_table.remove(invoice)

    if matching_invoices:
        return matching_invoices, match_rule
    else:
        return [], None






def match_one_to_one(T5, Invoice_table):
    matching_invoices = []
    match_rule = None

    for i, Invoice in enumerate(Invoice_table):
        if Invoice in matching_invoices:
            continue  # Skip already matched invoices

        for rule_index, rule in enumerate(rules, start=1):
            if rule(T5, Invoice=Invoice) and float(T5['fin_source_amt']) == float(Invoice['inv_match_source_amt']):
                matching_invoices.append((Invoice, rule_index))
                match_rule = rule_index
                break

        if matching_invoices:
            break

    for invoice, _ in matching_invoices:
        Invoice_table.remove(invoice)

    if matching_invoices:
        return matching_invoices, match_rule
    else:
        return [], None





def match_bundle(T5, Invoice_table):
    matching_invoices = []
    unmatched_invoices = Invoice_table[:]
    total_invoice_source_amt = 0
    match_rule = None

    for rule_index, rule in enumerate(rules, start=1):
        matched_invoices = []

        for Invoice in unmatched_invoices:
            if rule(T5, Invoice=Invoice):
                invoice_amt = float(Invoice['inv_match_source_amt'])
                remaining_amt = float(T5['fin_source_amt']) - total_invoice_source_amt

                if invoice_amt <= remaining_amt:
                    matched_invoices.append((Invoice, rule_index))

        if matched_invoices:
            best_match = max(matched_invoices, key=lambda x: float(x[0]['inv_match_source_amt']))
            matching_invoices.append(best_match)
            total_invoice_source_amt += float(best_match[0]['inv_match_source_amt'])
            unmatched_invoices.remove(best_match[0])
            match_rule = rule_index

        if total_invoice_source_amt == float(T5['fin_source_amt']):
            break

    if total_invoice_source_amt == float(T5['fin_source_amt']):
        return matching_invoices, match_rule
    else:
        return [], unmatched_invoices







def match_bundle(T5, Invoice_table):
    matching_invoices = []
    unmatched_invoices = Invoice_table[:]
    total_invoice_source_amt = 0
    match_rule = None

    for rule_index, rule in enumerate(rules, start=1):
        for i in range(len(unmatched_invoices)):
            Invoice = unmatched_invoices[i]
            if Invoice in matching_invoices:
                continue  # Skip already matched invoices

            if rule(T5, Invoice=Invoice):
                invoice_amt = float(Invoice['inv_match_source_amt'])
                remaining_amt = float(T5['fin_source_amt']) - total_invoice_source_amt

                if invoice_amt <= remaining_amt:
                    matching_invoices.append((Invoice, rule_index))
                    total_invoice_source_amt += invoice_amt

        if total_invoice_source_amt == float(T5['fin_source_amt']):
            match_rule = rule_index
            break

    if total_invoice_source_amt == float(T5['fin_source_amt']):
        return matching_invoices, match_rule
    else:
        return [], unmatched_invoices






import pandas as pd

def match_one_to_one(T5, Invoice_table):
    matching_invoices = []
    match_rule = None

    for i, Invoice in enumerate(Invoice_table):
        for rule_index, rule in enumerate(rules, start=1):
            if rule_index == 25 and (
                (T5['fin_orig_supplier_nm'] is None or pd.isnull(T5['fin_orig_supplier_nm'])) and
                (Invoice['inv_ticket_num'] is None or pd.isnull(Invoice['inv_ticket_num']))
            ):
                continue

            if rule(T5, Invoice=Invoice) and float(T5['fin_source_amt']) == float(Invoice['inv_match_source_amt']):
                matching_invoices.append((Invoice, rule_index))
                match_rule = rule_index
                break

        if matching_invoices:
            break

    return matching_invoices, match_rule





if (
    rule_index == 25 and
    (
        (T5['fin_orig_supplier_nm'] is None or str(T5['fin_orig_supplier_nm']).strip() == '') or
        (Invoice['inv_ticket_num'] is None or str(Invoice['inv_ticket_num']).strip() == '')
    )
):
    continue

