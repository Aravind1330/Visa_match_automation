Developed a Spark engine to automate the manual matching process for Bundle and single matches. This system efficiently processes various issuers on a daily basis, categorized by region. The primary goal is to minimize manual effort, enhance operational efficiency, and facilitate multiple audits to ensure the robustness of the automated processes.



import dash
from dash import html

# Assuming you have five dataframes df1, df2, df3, df4, df5
# You mentioned the row counts for each DataFrame

# Dummy row counts for demonstration
df1_count = 1000
df2_count = 200
df3_count = 789
df4_count = 763
df5_count = 87

# Create Dash app
app = dash.Dash(__name__)

# Define the layout of the app
app.layout = html.Div([
    html.H1("Stats UI using Dash"),
    
    # Display the row counts for each DataFrame in separate boxes
    html.Div([
        html.Div([
            html.H3(f"DataFrame 1"),
            html.P(f"Row Count: {df1_count}")
        ], style={'border': '1px solid black', 'padding': '10px', 'margin': '10px'}),
        
        html.Div([
            html.H3(f"DataFrame 2"),
            html.P(f"Row Count: {df2_count}")
        ], style={'border': '1px solid black', 'padding': '10px', 'margin': '10px'}),
        
        html.Div([
            html.H3(f"DataFrame 3"),
            html.P(f"Row Count: {df3_count}")
        ], style={'border': '1px solid black', 'padding': '10px', 'margin': '10px'}),
        
        html.Div([
            html.H3(f"DataFrame 4"),
            html.P(f"Row Count: {df4_count}")
        ], style={'border': '1px solid black', 'padding': '10px', 'margin': '10px'}),
        
        html.Div([
            html.H3(f"DataFrame 5"),
            html.P(f"Row Count: {df5_count}")
        ], style={'border': '1px solid black', 'padding': '10px', 'margin': '10px'}),
    ]),
])

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)
