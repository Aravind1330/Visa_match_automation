def match_row(T5, Invoice_table):
    matching_invoices = []
    total_invoice_source_amt = 0
    matched_rule_index = None  # Initialize matched_rule_index to None

    for i, Invoice in enumerate(Invoice_table):
        for rule in rules:
            if rule(row=T5, Invoice=Invoice):
                matching_invoices.append((Invoice, i + 1))
                total_invoice_source_amt += Invoice['Source Amt']
                matched_rule_index = i + 1  # Assign the rule index to matched_rule_index
                break

    if total_invoice_source_amt == T5['Transaction Source Amt']:
        return matching_invoices, matched_rule_index  # Include matched_rule_index in the return statement

    return [], None  # Return an empty list and None for matched_rule_index if no match is found




for T5 in T5_table:
    try:
        matched = False
        matched_rule = None  # Initialize matched_rule to None

        for Invoice in Invoice_table:
            matched, rule_index = match_row(T5, Invoice)
            if matched:
                matched_rule = rule_index  # Assign the rule index to matched_rule
                description = rule_descriptions.get(rule_index, '')
                output_row = {
                    column: T5[column] if column in T5 else Invoice[column] for column in output_columns[:-1]
                }
                matching_invoice_count = len(matched)
                output_row['Match Rule'] = matched_rule  # Assign matched_rule to 'Match Rule'
                output_row['Description'] = description

                output_rows.append(output_row)
                break

        if not matched:
            unmatched_output_row = {
                column: T5[column] for column in unmatched_output_columns
            }
            unmatched_output_rows.append(unmatched_output_row)

    except Exception as e:
        error_messages.append(f"Error processing T5: {T5}\n{str(e)}")
        continue
