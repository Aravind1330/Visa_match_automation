import pandas as pd

# Read the rules from a text file
with open("rules.txt", 'r') as f:
    rule_strings = f.readlines()

# Remove new line characters and empty lines, and convert to list of tuples
rules = []
for rule_string in rule_strings:
    rule_string = rule_string.strip()
    if rule_string:
        rule_values = rule_string.split(",")
        if len(rule_values) == 2:
            rule = tuple(rule_values)
            rules.append(rule)

# Define a function to apply the rules to each row pair and return the rule index
def match_row(row1, row2):
    for i, rule in enumerate(rules):
        if all(row1[k] == row2[v] for k, v in rule):
            return i+1
    return "Unmatched"

# Define rule descriptions
rule_descriptions = {
    1: 'Ticket_no_right_of_13, Acct_no, Amount, Currency, Date, C&D indicator, RPIC are same',
    2: 'Ticket_no_right_of_12'
}

# Read in the first Excel sheet and select necessary columns
T5_table = pd.read_excel('Unmatched_trans_Data_1.xlsx', usecols=["Company ID & Name", "fin_orig_supplier_nm", "fin_source_amt"])

# Read in the second Excel sheet and select necessary columns
Invoice_table = pd.read_excel('Unmatched_Inv_Data_1.xlsx', usecols=["inv_ticket_num", "inv_match_source_amt"])








import pandas as pd

# Read the rules from a text file
with open("rules.txt", 'r') as f:
    rule_strings = f.readlines()

# Remove new line characters and empty lines, and convert to list of tuples
rules = []
for rule_string in rule_strings:
    rule_string = rule_string.strip()
    if rule_string:
        rule_values = rule_string.split(",")
        if len(rule_values) == 2:
            rule = tuple(rule_values)
            rules.append(rule)

# Define a function to apply the rules to each row pair and return the rule index
def match_row(row1, row2):
    for i, rule in enumerate(rules):
        if all(row1[k] == row2[v] for k, v in rule):
            return i+1
    return "Unmatched"

# Define rule descriptions
rule_descriptions = {
    1: 'Ticket_no_right_of_13, Acct_no, Amount, Currency, Date, C&D indicator, RPIC are same',
    2: 'Ticket_no_right_of_12'
}

# Read in the first Excel sheet and select necessary columns
T5_table = pd.read_excel('Unmatched_trans_Data_1.xlsx', usecols=["Company ID & Name", "fin_orig_supplier_nm", "fin_source_amt"])

# Read in the second Excel sheet and select necessary columns
Invoice_table = pd.read_excel('Unmatched_Inv_Data_1.xlsx', usecols=["inv_ticket_num", "inv_match_source_amt"])

# Rename columns for consistency
Invoice_table.rename(columns={"inv_ticket_num": "fin_orig_supplier_nm", "inv_match_source_amt": "fin_source_amt"}, inplace=True)

# Combine the two tables based on common columns
merged_table = pd.concat([T5_table, Invoice_table], ignore_index=True)

# Apply the matching rules to each row pair and add the rule index to the merged table
matched_rules = []
unmatched_rows = []
for i, row in merged_table.iterrows():
    rule_index = match_row(row[:2], row[2:])
    if rule_index != "Unmatched":
        matched_rules.append(rule_index)
    else:
        unmatched_rows.append(i)

# Create a new DataFrame with the matched rows and the corresponding rule index
matched_table = pd.DataFrame({"Row Index": matched_rules, "Match Rule": matched_rules})

# Merge the matched table with the original table to add the Match Rule column
T5_table = pd.merge(T5_table, matched_table, left_index=True, right_on="Row Index", how="left")

# Replace NaN values in Match Rule column with "Unmatched"
T5_table["Match Rule"].fillna("Unmatched", inplace=True)

# Add the rule descriptions to the Match Rule column
T5_table["Match Rule"] = T5_table["Match Rule"].map(rule_descriptions)

# Group by Company ID & Name and Match Rule columns and count the number of occurrences
aggregated = T5_table.groupby(["Company ID & Name", "Match Rule"]).size().reset_index(name="TRF")

# Calculate the total number of TRFs
total = aggregated["TRF"].sum()

print(aggregated)
print("Total number of TRFs:", total)


# Rename columns for consistency
Invoice_table.rename(columns={"inv_ticket_num": "fin_orig_supplier_nm", "inv_match_source_amt": "fin_source_amt"}, inplace=True)

# Combine the two tables based on common columns
merged_table = pd.concat([T5_table, Invoice_table], ignore_index=True)

# Apply the matching rules to each row pair and add the rule index to the merged table
matched_rules = []
unmatched_rows = []
for i, row in merged_table.iterrows():
    rule_index = match_row(row[:2], row[2:])
    if rule_index != "Unmatched":
        matched_rules.append(rule_index)
    else:
        unmatched_rows.append(i)

# Create a new DataFrame with the matched rows and the corresponding rule index
matched_table = pd.DataFrame({"Index": matched_rows, "Match Rule": matched_rules})

# Merge the matched table with the original table to add the Match Rule column
T5_table = pd.merge(T5_table, matched_table, left_index=True, right_on="Index", how="left")

# Replace NaN values in Match Rule column with "Unmatched"
T5_table["Match Rule"].fillna("Unmatched", inplace=True)

# Add the rule descriptions to the Match Rule column
T5_table["Match Rule"] = T5_table["Match Rule"].map(rule_descriptions)

# Group by Company ID & Name and Match Rule columns and count the number of occurrences
aggregated = T5_table.groupby(["Company ID & Name", "Match Rule"]).size().reset_index(name="TRF")

# Calculate the total number of TRFs
total = aggregated["TRF"].sum()























import pandas as pd

# Read the rules from a text file
with open("rules.txt", 'r') as f:
    rule_strings = f.readlines()

# Remove new line characters and empty lines, and convert to list of tuples
rules = []
for rule_string in rule_strings:
    rule_string = rule_string.strip()
    if rule_string:
        rule_values = rule_string.split(",")
        if len(rule_values) == 2:
            rule = tuple(rule_values)
            rules.append(rule)

# Define a function to apply the rules to each row pair and return the rule index
def match_row(row1, row2):
    for i, rule in enumerate(rules):
        if all(row1[k] == row2[v] for k, v in rule):
            return i+1
    return "Unmatched"

# Define rule descriptions
rule_descriptions = {
    1: 'Ticket_no_right_of_13, Acct_no, Amount, Currency, Date, C&D indicator, RPIC are same',
    2: 'Ticket_no_right_of_12'
}

# Read in the first Excel sheet and select necessary columns
T5_table = pd.read_excel('Unmatched_trans_Data_1.xlsx', usecols=["Company ID & Name", "fin_orig_supplier_nm", "fin_source_amt"])

# Read in the second Excel sheet and select necessary columns
Invoice_table = pd.read_excel('Unmatched_Inv_Data_1.xlsx', usecols=["inv_ticket_num", "inv_match_source_amt"])

# Rename columns for consistency
Invoice_table.rename(columns={"inv_ticket_num": "fin_orig_supplier_nm", "inv_match_source_amt": "fin_source_amt"}, inplace=True)

# Combine the two tables based on common columns
merged_table = pd.concat([T5_table, Invoice_table], ignore_index=True)

# Apply the matching rules to each row pair and add the rule index to the matched table
matched_rows = []
matched_rules = []
for i, row1 in merged_table.iterrows():
    for j, row2 in merged_table.iloc[i+1:].iterrows():
        rule_index = match_row(row1[:2], row2[:2])
        if rule_index != "Unmatched":
            matched_rows.extend([i, j])
            matched_rules.extend([rule_index]*2)

# Create a new DataFrame with the matched rows and the corresponding rule index
matched_table = pd.DataFrame({"Index": matched_rows, "Match Rule": matched_rules})

# Merge the matched table with the original table to add the Match Rule column
T5_table = pd.merge(T5_table, matched_table, left_index=True, right_on="Index", how="left")

# Replace NaN values in the Match Rule column with "Unmatched"
T5_table["Match Rule"].fillna("Unmatched", inplace=True)

# Add the rule descriptions to the table
T5_table["Description"] = T5_table["Match Rule"].map(rule_descriptions)

# Group the table by Company ID & Name and Match Rule, and count the number of occurrences
grouped = T5_table.groupby(["Company ID & Name",













# Loop through each row in table1 and find a match in table2
for i, T5 in T5_table.iterrows():
    matched = False
    for j, Invoice in Invoice_table.iterrows():
        matched, rule_index = match_row(T5.astype(str).to_dict(), Invoice.astype(str).to_dict())
        if matched:
            T5_table.at[i, 'Match Rule'] = rule_index













# Remove new line characters and empty lines, and convert to list of functions
rules = []
for rule_string in rule_strings:
    rule_string = rule_string.strip()
    if rule_string:
        rule = eval(f"lambda row, row2: {rule_string}")
        rules.append(rule)

# Define a function to apply the rules to each row pair and return the rule index
def match_row(row1, row2):
    for i, rule in enumerate(rules):
        try:
            if rule(str(row1), str(row2)):
                return True, i+1
        except TypeError:
            pass
    return False, "Unmatched"

T5_table = pd.read_excel('Z:/Downloads/Unmatched_trans_Data_1.xlsx', dtype=str)
# Read in the second Excel sheet
Invoice_table = pd.read_excel('Z:/Downloads/Unmatched_Inv_Data_1.xlsx', dtype=str)

# Create an empty column for the match rule index
T5_table['Match Rule'] = pd.Series(["Unmatched"]*len(T5_table))

# Loop through each row in table1 and find a match in table2
for i, T5 in T5_table.iterrows():
    matched = False
    for j, Invoice in Invoice_table.iterrows():
        matched, rule_index = match_row(T5, Invoice)
        if matched:
            T5_table.at[i, 'Match Rule'] = rule_index





import pandas as pd

# create sample dataframe
df = pd.DataFrame({
    'col1': [1, 2, 3],
    'col2': ['a', 'b', 'c'],
    'col3': [1.1, 2.2, 3.3]
})

# check which columns have float values
float_cols = [col for col in df.columns if df[col].dtype == 'float64']

print(float_cols)











import pandas as pd

# create a sample DataFrame
df = pd.DataFrame({
    'col1': [1, 2, 3],
    'col2': [4.0, 5.0, 6.0],
    'col3': ['a', 'b', 'c']
})

# loop through each column in the DataFrame
for col in df.columns:
    # check if the column contains any float values
    if df[col].dtype == 'float':
        print(f"{col} contains float values.")
    else:
        print(f"{col} does not contain float values.")
