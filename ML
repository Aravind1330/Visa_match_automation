import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
from sklearn import preprocessing

# Load the data
data = pd.read_csv('invoices_transactions.csv')

# Preprocess the data
# Assuming you have two columns: 'invoice_text' and 'transaction_text'
# Preprocessing involves cleaning and transforming the text data
# You can use techniques like removing punctuation, lowercasing, tokenization, etc.

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(
    data['invoice_text'], data['transaction_text'], test_size=0.2, random_state=42)

# Vectorize the text data
vectorizer = TfidfVectorizer()
X_train_vectorized = vectorizer.fit_transform(X_train)
X_test_vectorized = vectorizer.transform(X_test)

# Train a logistic regression classifier
classifier = LogisticRegression()
classifier.fit(X_train_vectorized, y_train)

# Predict on the test set
predictions = classifier.predict(X_test_vectorized)

# Evaluate the model
accuracy = accuracy_score(y_test, predictions)
print(f"Accuracy: {accuracy}")

# Match new invoices with transactions
new_invoices = [
    "Invoice 1 text",
    "Invoice 2 text",
    "Invoice 3 text"
]

# Vectorize the new invoice text
new_invoices_vectorized = vectorizer.transform(new_invoices)

# Predict the matching transactions for new invoices
predicted_transactions = classifier.predict(new_invoices_vectorized)

# Print the predicted transactions
for invoice, transaction in zip(new_invoices, predicted_transactions):
    print(f"Invoice: {invoice} - Predicted Transaction: {transaction}")










import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load your transaction and invoice data into pandas DataFrames
transaction_data = pd.read_csv('transaction_data.csv')
invoice_data = pd.read_csv('invoice_data.csv')

# Select relevant columns for matching
transaction_features = transaction_data['supplier_name'].astype(str)
invoice_features = invoice_data['ticket_number'].astype(str).str[:5]

# Preprocess data and create feature vectors
vectorizer = TfidfVectorizer()
transaction_vectors = vectorizer.fit_transform(transaction_features)
invoice_vectors = vectorizer.transform(invoice_features)

# Compute cosine similarity between transaction and invoice vectors
similarity_matrix = cosine_similarity(transaction_vectors, invoice_vectors)

# Find the best matches
threshold = 0.8  # Adjust the threshold based on your needs
matches = []
for transaction_idx, row in enumerate(similarity_matrix):
    best_match_idx = row.argmax()
    best_match_score = row[best_match_idx]
    if best_match_score >= threshold:
        transaction_id = transaction_data.iloc[transaction_idx]['transaction_id']
        invoice_id = invoice_data.iloc[best_match_idx]['invoice_id']
        matches.append((transaction_id, invoice_id, best_match_score))

# Display the matches
for transaction_id, invoice_id, score in matches:
    print(f"Match found: Transaction ID {transaction_id} -> Invoice ID {invoice_id}, Score: {score}")





# Display and save the matches
output_file = 'matches.csv'
with open(output_file, 'w') as file:
    file.write("Transaction ID, Invoice ID, Score\n")
    for transaction_id, invoice_id, score in matches:
        print(f"Match found: Transaction ID {transaction_id} -> Invoice ID {invoice_id}, Score: {score}")
        file.write(f"{transaction_id}, {invoice_id}, {score}\n")

print(f"Matches saved to {output_file}")











import pandas as pd
from fuzzywuzzy import fuzz

# Load your transaction and invoice data into pandas DataFrames
transaction_data = pd.read_csv('transaction_data.csv')
invoice_data = pd.read_csv('invoice_data.csv')

# Select relevant columns for matching
transaction_features = transaction_data['supplier_name'].astype(str)
invoice_features = invoice_data['ticket_number'].astype(str).str[:5]

# Find the best matches
threshold = 80  # Adjust the threshold based on your needs
matches = []
for transaction_idx, transaction_name in enumerate(transaction_features):
    best_match_score = -1
    best_match_idx = -1
    for invoice_idx, invoice_name in enumerate(invoice_features):
        similarity_score = fuzz.ratio(transaction_name, invoice_name)
        if similarity_score > best_match_score:
            best_match_score = similarity_score
            best_match_idx = invoice_idx

    if best_match_score >= threshold:
        transaction_id = transaction_data.iloc[transaction_idx]['transaction_id']
        invoice_id = invoice_data.iloc[best_match_idx]['invoice_id']
        matches.append((transaction_id, invoice_id, best_match_idx, best_match_score))

# Display and save the matches
output_file = 'matches.csv'
with open(output_file, 'w') as file:
    file.write("Transaction ID, Invoice ID, Best Match Index, Score\n")
    for match in matches:
        file.write(f"{match[0]}, {match[1]}, {match[2]}, {match[3]}\n")
        print(f"Match found: Transaction ID {match[0]} -> Invoice ID {match[1]}, Best Match Index: {match[2]}, Score: {match[3]}")

print(f"Matches saved to {output_file}")









import pandas as pd
from fuzzywuzzy import fuzz

# Load your transaction and invoice data into pandas DataFrames
transaction_data = pd.read_csv('transaction_data.csv')
invoice_data = pd.read_csv('invoice_data.csv')

# Select relevant columns for matching
transaction_features = transaction_data['supplier_name'].astype(str)
invoice_features = invoice_data['ticket_number'].astype(str).str[:5]

# Create a set to store matched invoice indices
matched_indices = set()

# Find the best matches
threshold = 80  # Adjust the threshold based on your needs
matches = []
for transaction_idx, transaction_name in enumerate(transaction_features):
    best_match_score = -1
    best_match_idx = -1
    for invoice_idx, invoice_name in enumerate(invoice_features):
        if invoice_idx not in matched_indices:  # Check if the invoice has already been matched
            similarity_score = fuzz.ratio(transaction_name, invoice_name)
            if similarity_score > best_match_score:
                best_match_score = similarity_score
                best_match_idx = invoice_idx

    if best_match_score >= threshold:
        transaction_id = transaction_data.iloc[transaction_idx]['transaction_id']
        invoice_id = invoice_data.iloc[best_match_idx]['invoice_id']
        matches.append((transaction_id, invoice_id, best_match_idx, best_match_score))
        matched_indices.add(best_match_idx)  # Add the matched invoice index to the set

# Display and save the matches
output_file = 'matches.csv'
with open(output_file, 'w') as file:
    file.write("Transaction ID, Invoice ID, Best Match Index, Score\n")
    for match in matches:
        file.write(f"{match[0]}, {match[1]}, {match[2]}, {match[3]}\n")
        print(f"Match found: Transaction ID {match[0]} -> Invoice ID {match[1]}, Best Match Index: {match[2]}, Score: {match[3]}")

print(f"Matches saved to {output_file}")

















import pandas as pd
from fuzzywuzzy import fuzz

# Load your transaction and invoice data into pandas DataFrames
transaction_data = pd.read_csv('transaction_data.csv')
invoice_data = pd.read_csv('invoice_data.csv')

# Select relevant columns for matching
transaction_features = transaction_data['supplier_name'].astype(str)
invoice_features = invoice_data['ticket_number'].astype(str).str[:5]

# Create a set to store matched invoice indices
matched_indices = set()

# Find the best matches
threshold = 80  # Adjust the threshold based on your needs
matches = []
for transaction_idx, transaction_name in enumerate(transaction_features):
    best_match_score = -1
    best_match_idx = -1
    for invoice_idx, invoice_name in enumerate(invoice_features):
        if invoice_idx not in matched_indices:  # Check if the invoice has already been matched
            for i in range(len(transaction_name)-4):
                substring = transaction_name[i:i+5]
                similarity_score = fuzz.ratio(substring, invoice_name)
                if similarity_score > best_match_score:
                    best_match_score = similarity_score
                    best_match_idx = invoice_idx

    if best_match_score >= threshold:
        transaction_id = transaction_data.iloc[transaction_idx]['transaction_id']
        invoice_id = invoice_data.iloc[best_match_idx]['invoice_id']
        matches.append((transaction_id, invoice_id, best_match_idx, best_match_score))
        matched_indices.add(best_match_idx)  # Add the matched invoice index to the set

# Display and save the matches
output_file = 'matches.csv'
with open(output_file, 'w') as file:
    file.write("Transaction ID, Invoice ID, Best Match Index, Score\n")
    for match in matches:
        file.write(f"{match[0]}, {match[1]}, {match[2]}, {match[3]}\n")
        print(f"Match found: Transaction ID {match[0]} -> Invoice ID {match[1]}, Best Match Index: {match[2]}, Score: {match[3]}")

print(f"Matches saved to {output_file}")













import pandas as pd
from fuzzywuzzy import fuzz

# Load your transaction and invoice data into pandas DataFrames
transaction_data = pd.read_csv('transaction_data.csv')
invoice_data = pd.read_csv('invoice_data.csv')

# Select relevant columns for matching
transaction_features = transaction_data['supplier_name'].astype(str)
invoice_features = invoice_data['ticket_number'].astype(str).str[:5]

# Create a set to store matched invoice indices
matched_indices = set()

# Find the best matches
threshold = 80  # Adjust the threshold based on your needs
matches = []
for transaction_idx, transaction_name in enumerate(transaction_features):
    best_match_score = -1
    best_match_idx = -1
    best_match_pattern = ""
    for invoice_idx, invoice_name in enumerate(invoice_features):
        if invoice_idx not in matched_indices:  # Check if the invoice has already been matched
            for i in range(len(transaction_name) - 4):
                substring = transaction_name[i:i + 5]
                similarity_score = fuzz.ratio(substring, invoice_name)
                if similarity_score > best_match_score:
                    best_match_score = similarity_score
                    best_match_idx = invoice_idx
                    best_match_pattern = f"{transaction_name} -> {substring} = {invoice_name}"

    if best_match_score >= threshold:
        transaction_id = transaction_data.iloc[transaction_idx]['transaction_id']
        invoice_id = invoice_data.iloc[best_match_idx]['invoice_id']
        matches.append((transaction_id, invoice_id, best_match_idx, best_match_score, best_match_pattern))
        matched_indices.add(best_match_idx)  # Add the matched invoice index to the set

# Display and save the matches
output_file = 'matches.csv'
with open(output_file, 'w') as file:
    file.write("Transaction ID, Invoice ID, Best Match Index, Score, Matched Pattern\n")
    for match in matches:
        file.write(f"{match[0]}, {match[1]}, {match[2]}, {match[3]}, {match[4]}\n")
        print(f"Match found: Transaction ID {match[0]} -> Invoice ID {match[1]}, "
              f"Best Match Index: {match[2]}, Score: {match[3]}, Matched Pattern: {match[4]}")

print(f"Matches saved to {output_file}")










# Convert unmatched invoices to DataFrame and write to CSV
unmatched_output_df = pd.DataFrame(unmatched_invoices)
unmatched_output_df.to_csv('Z:/Desktop/unmatched_output.csv', index=False)
