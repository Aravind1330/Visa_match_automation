def match_row(T5, Invoice, used_invoice_ids):
    for i, rule in enumerate(rules):
        if rule(T5, Invoice):
            if Invoice['Invoice ID'] not in used_invoice_ids:
                return True, i+1
    return False, "Unmatched"


This function takes two rows (one from each table), applies each of the rules to the pair of rows, and returns the index of the first rule that matches the pair. 
It also keeps track of which invoice IDs have already been used, to prevent multiple matches for the same invoice.




used_invoice_ids = []

for T5 in T5_table:
    matched = False
    for Invoice in Invoice_table:
        matched, rule_index = match_row(T5, Invoice, used_invoice_ids)
        if matched:
            description = rule_descriptions[rule_index]
            output_data.append({'Company ID & Name': T5['Company ID & Name'], 'Match Rule': rule_index, 'description': description, 'fin_orig_supplier_nm': T5['fin_orig_supplier_nm'], 'fin_source_amt': T5['fin_source_amt'], 'inv_match_source_amt': Invoice['inv_match_source_amt'], 'inv_erp_vend_no': Invoice['inv_erp_vend_no'], 'inv_po_no': Invoice['inv_po_no']})
            used_invoice_ids.append(Invoice['Invoice ID'])
            break


This code loops through each row in T5_table, and for each row, it loops through each row in Invoice_table to find a match using the match_row() function. 
If a match is found, the metadata for the matched rows is appended




abs((row1["Transaction_Date"] - row2["Date"]).days) <= 5
from datetime import datetime







# Define a function to apply the rules to each row pair and return the rule index
def match_row(T5, Invoice, used_invoice_ids):
    for i, rule in enumerate(rules):
        if rule(T5, Invoice):
            # Check if the invoice ID has already been used
            if Invoice['Invoice ID'] not in used_invoice_ids:
                return True, i+1
    return False, "Unmatched"

# assuming row1["Transaction_Date"] and row2["Date"] are strings in the format "YYYY-MM-DD"
transaction_date = datetime.strptime(row1["Transaction_Date"], "%Y-%m-%d")
date = datetime.strptime(row2["Date"], "%Y-%m-%d")




   abs((datetime.strptime(row1["Transaction_Date"], "%Y-%m-%d") - datetime.strptime(row2["Date"], "%Y-%m-%d")).days) <= 5:




# Define a function to apply the rules to each row pair and return the rule index
def match_row(T5, Invoice, used_invoice_ids):
    for i, rule in enumerate(rules):
        if rule(T5, Invoice):
            # Check if the invoice ID has already been used
            if Invoice['Invoice ID'] not in used_invoice_ids:
                return True, i+1
    return False, "Unmatched"







from pyspark.sql import SparkSession
from pyspark.sql.functions import udf
from pyspark.sql.types import *

# Initialize SparkSession
spark = SparkSession.builder.appName('Row Matching').getOrCreate()

# Read the rules from a text file
with open("Z:/Desktop/Rules_1.txt", 'r') as f:
    rule_strings = f.readlines()

# Remove new line characters and empty lines, and convert to list of functions
rules = []
for rule_string in rule_strings:
    rule_string = rule_string.strip()
    if rule_string:
        rule = eval(f"lambda T5, Invoice: {rule_string}")
        rules.append(rule)

# Define a UDF to apply the rules to each row pair and return the rule index
match_row_udf = udf(lambda T5, Invoice, used_invoice_ids: (False, 'Unmatched'),
                    StructType([
                        StructField('matched', BooleanType()),
                        StructField('rule_index', StringType())
                    ]))
for i, rule in enumerate(rules):
    match_row_udf = udf(lambda T5, Invoice, used_invoice_ids, i=i, rule=rule: (rule(T5, Invoice) and Invoice['Invoice ID'] not in used_invoice_ids, str(i+1)),
                        StructType([
                            StructField('matched', BooleanType()),
                            StructField('rule_index', StringType())
                        ]))

# Read in the two Excel sheets as Spark dataframes
T5_df = spark.read.format('com.crealytics.spark.excel') \
                  .option('dataAddress', "'Sheet1'!") \
                  .option('header', 'true') \
                  .option('inferSchema', 'true') \
                  .load('Z:/Downloads/Unmatched_trans_Data_1.xlsx')
Invoice_df = spark.read.format('com.crealytics.spark.excel') \
                      .option('dataAddress', "'Sheet1'!") \
                      .option('header', 'true') \
                      .option('inferSchema', 'true') \
                      .load('Z:/Downloads/Unmatched_Inv_Data_1.xlsx')

# Define a dataframe for rule descriptions
rule_descriptions_df = spark.createDataFrame([(1, 'Ticket_no_right_of_13, Acct_no, Amount, Currency, Date, C&D indicator, RPIC are same'),
                                              (2, 'Ticket_no_right_of_12')],
                                             ['rule_index', 'description'])

# Define a UDF to calculate the total
total_udf = udf(lambda counts: sum(counts),
                IntegerType())

# Apply the rules to each row pair
output_df = T5_df.crossJoin(Invoice_df) \
                 .withColumn('matched_rule', match_row_udf('T5', 'Invoice', 'used_invoice_ids')) \
                 .select('Company ID & Name', 'matched_rule.rule_index', 'rule_descriptions.description', 'fin_orig_supplier_nm', 'fin_source_amt', 'inv_match_source_amt', 'inv_erp_vend_no', 'inv_po_no') \
                 .withColumnRenamed('matched_rule.rule_index', 'Match Rule




(abs(pd.to_datetime(row['Date']) - pd.to_datetime(row2['inv_match_date'])).days) <= 15
