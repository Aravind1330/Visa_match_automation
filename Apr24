valid_regions = [1, 2, 3]
T5_table = T5_table[T5_table['region id'].isin(valid_regions)]




T5_table = [row for row in T5_table if row['region id'] in valid_regions]




valid_regions = config['valid_regions']
T5_table = pd.read_excel(config['input_file_path'], dtype=str)
T5_table = T5_table[T5_table['region id'].isin(valid_regions)].to_dict(orient='records')




# Read the T5 data from an Excel file
T5_table = pd.read_excel(config['input_file_path'], dtype=str)

# Filter out rows with region id other than 1, 2, or 3
T5_table = T5_table[T5_table['region id'].isin(['1', '2', '3'])]

# Convert the remaining rows to a dictionary
T5_table = T5_table.to_dict(orient='records')











Invoice_table['inv_match_source_amt'] = Invoice_table['inv_match_source_amt'].replace('-', '')


output_df['inv_match_source_amt'] = output_df['inv_match_source_amt'].replace('', '-')



import configparser

config = configparser.ConfigParser()
config.read('config.ini')

new_output_columns = dict(config.items('output_columns'))
output_df = output_df.rename(columns=new_output_columns)

